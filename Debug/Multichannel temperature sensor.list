
Multichannel temperature sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000385c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003988  08003988  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003990  08003990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  080039a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080039a4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001020a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7a  00000000  00000000  0003023e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  000321b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00033030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012436  00000000  00000000  00033de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f0f  00000000  00000000  00046216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073d29  00000000  00000000  00057125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cae4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003500  00000000  00000000  000caea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003904 	.word	0x08003904

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003904 	.word	0x08003904

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fdf4 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f812 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 fb50 	bl	8000b4c <MX_GPIO_Init>
  MX_ADC_Init();
 80004ac:	f000 f87c 	bl	80005a8 <MX_ADC_Init>
  MX_I2C1_Init();
 80004b0:	f000 f946 	bl	8000740 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004b4:	f000 f984 	bl	80007c0 <MX_I2C2_Init>
  MX_TIM2_Init();
 80004b8:	f000 f9c2 	bl	8000840 <MX_TIM2_Init>
  MX_TIM21_Init();
 80004bc:	f000 fa3e 	bl	800093c <MX_TIM21_Init>
  MX_TIM22_Init();
 80004c0:	f000 faa8 	bl	8000a14 <MX_TIM22_Init>
  MX_USART1_UART_Init();
 80004c4:	f000 fb12 	bl	8000aec <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <main+0x2c>
	...

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b09b      	sub	sp, #108	; 0x6c
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	2434      	movs	r4, #52	; 0x34
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	2334      	movs	r3, #52	; 0x34
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f003 fa09 	bl	80038f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e2:	2320      	movs	r3, #32
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	0018      	movs	r0, r3
 80004e8:	2314      	movs	r3, #20
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f003 fa01 	bl	80038f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	0018      	movs	r0, r3
 80004f6:	231c      	movs	r3, #28
 80004f8:	001a      	movs	r2, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	f003 f9fa 	bl	80038f4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	4b27      	ldr	r3, [pc, #156]	; (80005a0 <SystemClock_Config+0xd4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a27      	ldr	r2, [pc, #156]	; (80005a4 <SystemClock_Config+0xd8>)
 8000506:	401a      	ands	r2, r3
 8000508:	4b25      	ldr	r3, [pc, #148]	; (80005a0 <SystemClock_Config+0xd4>)
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0109      	lsls	r1, r1, #4
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2210      	movs	r2, #16
 8000518:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	22a0      	movs	r2, #160	; 0xa0
 800052a:	0212      	lsls	r2, r2, #8
 800052c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052e:	187b      	adds	r3, r7, r1
 8000530:	2200      	movs	r2, #0
 8000532:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	187b      	adds	r3, r7, r1
 8000536:	0018      	movs	r0, r3
 8000538:	f001 fb8a 	bl	8001c50 <HAL_RCC_OscConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000540:	f000 fb32 	bl	8000ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	2120      	movs	r1, #32
 8000546:	187b      	adds	r3, r7, r1
 8000548:	220f      	movs	r2, #15
 800054a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2100      	movs	r1, #0
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fedb 	bl	8002324 <HAL_RCC_ClockConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000572:	f000 fb19 	bl	8000ba8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2209      	movs	r2, #9
 800057a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	0018      	movs	r0, r3
 800058c:	f002 f8ee 	bl	800276c <HAL_RCCEx_PeriphCLKConfig>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000594:	f000 fb08 	bl	8000ba8 <Error_Handler>
  }
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b01b      	add	sp, #108	; 0x6c
 800059e:	bd90      	pop	{r4, r7, pc}
 80005a0:	40007000 	.word	0x40007000
 80005a4:	ffffe7ff 	.word	0xffffe7ff

080005a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	2308      	movs	r3, #8
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f003 f99c 	bl	80038f4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005bc:	4b57      	ldr	r3, [pc, #348]	; (800071c <MX_ADC_Init+0x174>)
 80005be:	4a58      	ldr	r2, [pc, #352]	; (8000720 <MX_ADC_Init+0x178>)
 80005c0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005c2:	4b56      	ldr	r3, [pc, #344]	; (800071c <MX_ADC_Init+0x174>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005c8:	4b54      	ldr	r3, [pc, #336]	; (800071c <MX_ADC_Init+0x174>)
 80005ca:	22c0      	movs	r2, #192	; 0xc0
 80005cc:	0612      	lsls	r2, r2, #24
 80005ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005d0:	4b52      	ldr	r3, [pc, #328]	; (800071c <MX_ADC_Init+0x174>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005d6:	4b51      	ldr	r3, [pc, #324]	; (800071c <MX_ADC_Init+0x174>)
 80005d8:	2200      	movs	r2, #0
 80005da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005dc:	4b4f      	ldr	r3, [pc, #316]	; (800071c <MX_ADC_Init+0x174>)
 80005de:	2201      	movs	r2, #1
 80005e0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b4e      	ldr	r3, [pc, #312]	; (800071c <MX_ADC_Init+0x174>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005e8:	4b4c      	ldr	r3, [pc, #304]	; (800071c <MX_ADC_Init+0x174>)
 80005ea:	2220      	movs	r2, #32
 80005ec:	2100      	movs	r1, #0
 80005ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b4a      	ldr	r3, [pc, #296]	; (800071c <MX_ADC_Init+0x174>)
 80005f2:	2221      	movs	r2, #33	; 0x21
 80005f4:	2100      	movs	r1, #0
 80005f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f8:	4b48      	ldr	r3, [pc, #288]	; (800071c <MX_ADC_Init+0x174>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fe:	4b47      	ldr	r3, [pc, #284]	; (800071c <MX_ADC_Init+0x174>)
 8000600:	22c2      	movs	r2, #194	; 0xc2
 8000602:	32ff      	adds	r2, #255	; 0xff
 8000604:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000606:	4b45      	ldr	r3, [pc, #276]	; (800071c <MX_ADC_Init+0x174>)
 8000608:	222c      	movs	r2, #44	; 0x2c
 800060a:	2100      	movs	r1, #0
 800060c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <MX_ADC_Init+0x174>)
 8000610:	2204      	movs	r2, #4
 8000612:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000614:	4b41      	ldr	r3, [pc, #260]	; (800071c <MX_ADC_Init+0x174>)
 8000616:	2200      	movs	r2, #0
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <MX_ADC_Init+0x174>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000620:	4b3e      	ldr	r3, [pc, #248]	; (800071c <MX_ADC_Init+0x174>)
 8000622:	2201      	movs	r2, #1
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000626:	4b3d      	ldr	r3, [pc, #244]	; (800071c <MX_ADC_Init+0x174>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800062c:	4b3b      	ldr	r3, [pc, #236]	; (800071c <MX_ADC_Init+0x174>)
 800062e:	0018      	movs	r0, r3
 8000630:	f000 fd9c 	bl	800116c <HAL_ADC_Init>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000638:	f000 fab6 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800063c:	003b      	movs	r3, r7
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000642:	003b      	movs	r3, r7
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	0152      	lsls	r2, r2, #5
 8000648:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800064a:	003a      	movs	r2, r7
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <MX_ADC_Init+0x174>)
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f000 feff 	bl	8001454 <HAL_ADC_ConfigChannel>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800065a:	f000 faa5 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800065e:	003b      	movs	r3, r7
 8000660:	4a30      	ldr	r2, [pc, #192]	; (8000724 <MX_ADC_Init+0x17c>)
 8000662:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000664:	003a      	movs	r2, r7
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <MX_ADC_Init+0x174>)
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 fef2 	bl	8001454 <HAL_ADC_ConfigChannel>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000674:	f000 fa98 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000678:	003b      	movs	r3, r7
 800067a:	4a2b      	ldr	r2, [pc, #172]	; (8000728 <MX_ADC_Init+0x180>)
 800067c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800067e:	003a      	movs	r2, r7
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <MX_ADC_Init+0x174>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fee5 	bl	8001454 <HAL_ADC_ConfigChannel>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800068e:	f000 fa8b 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000692:	003b      	movs	r3, r7
 8000694:	4a25      	ldr	r2, [pc, #148]	; (800072c <MX_ADC_Init+0x184>)
 8000696:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000698:	003a      	movs	r2, r7
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_ADC_Init+0x174>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fed8 	bl	8001454 <HAL_ADC_ConfigChannel>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80006a8:	f000 fa7e 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006ac:	003b      	movs	r3, r7
 80006ae:	4a20      	ldr	r2, [pc, #128]	; (8000730 <MX_ADC_Init+0x188>)
 80006b0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006b2:	003a      	movs	r2, r7
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_ADC_Init+0x174>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fecb 	bl	8001454 <HAL_ADC_ConfigChannel>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 80006c2:	f000 fa71 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006c6:	003b      	movs	r3, r7
 80006c8:	4a1a      	ldr	r2, [pc, #104]	; (8000734 <MX_ADC_Init+0x18c>)
 80006ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006cc:	003a      	movs	r2, r7
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_ADC_Init+0x174>)
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f000 febe 	bl	8001454 <HAL_ADC_ConfigChannel>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC_Init+0x138>
  {
    Error_Handler();
 80006dc:	f000 fa64 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006e0:	003b      	movs	r3, r7
 80006e2:	4a15      	ldr	r2, [pc, #84]	; (8000738 <MX_ADC_Init+0x190>)
 80006e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006e6:	003a      	movs	r2, r7
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_ADC_Init+0x174>)
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f000 feb1 	bl	8001454 <HAL_ADC_ConfigChannel>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC_Init+0x152>
  {
    Error_Handler();
 80006f6:	f000 fa57 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006fa:	003b      	movs	r3, r7
 80006fc:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MX_ADC_Init+0x194>)
 80006fe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000700:	003a      	movs	r2, r7
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_ADC_Init+0x174>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fea4 	bl	8001454 <HAL_ADC_ConfigChannel>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC_Init+0x16c>
  {
    Error_Handler();
 8000710:	f000 fa4a 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b002      	add	sp, #8
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200001c4 	.word	0x200001c4
 8000720:	40012400 	.word	0x40012400
 8000724:	04000002 	.word	0x04000002
 8000728:	10000010 	.word	0x10000010
 800072c:	14000020 	.word	0x14000020
 8000730:	18000040 	.word	0x18000040
 8000734:	1c000080 	.word	0x1c000080
 8000738:	20000100 	.word	0x20000100
 800073c:	24000200 	.word	0x24000200

08000740 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_I2C1_Init+0x78>)
 8000746:	4a1d      	ldr	r2, [pc, #116]	; (80007bc <MX_I2C1_Init+0x7c>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x78>)
 800074c:	22e1      	movs	r2, #225	; 0xe1
 800074e:	00d2      	lsls	r2, r2, #3
 8000750:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_I2C1_Init+0x78>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C1_Init+0x78>)
 800075a:	2201      	movs	r2, #1
 800075c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_I2C1_Init+0x78>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C1_Init+0x78>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_I2C1_Init+0x78>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x78>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <MX_I2C1_Init+0x78>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x78>)
 800077e:	0018      	movs	r0, r3
 8000780:	f001 f938 	bl	80019f4 <HAL_I2C_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fa0e 	bl	8000ba8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2C1_Init+0x78>)
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f001 f9c5 	bl	8001b20 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800079a:	f000 fa05 	bl	8000ba8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2C1_Init+0x78>)
 80007a0:	2100      	movs	r1, #0
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fa08 	bl	8001bb8 <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007ac:	f000 f9fc 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000028 	.word	0x20000028
 80007bc:	40005400 	.word	0x40005400

080007c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_I2C2_Init+0x78>)
 80007c6:	4a1d      	ldr	r2, [pc, #116]	; (800083c <MX_I2C2_Init+0x7c>)
 80007c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C2_Init+0x78>)
 80007cc:	22e1      	movs	r2, #225	; 0xe1
 80007ce:	00d2      	lsls	r2, r2, #3
 80007d0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_I2C2_Init+0x78>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C2_Init+0x78>)
 80007da:	2201      	movs	r2, #1
 80007dc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_I2C2_Init+0x78>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_I2C2_Init+0x78>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_I2C2_Init+0x78>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C2_Init+0x78>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_I2C2_Init+0x78>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_I2C2_Init+0x78>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 f8f8 	bl	80019f4 <HAL_I2C_Init>
 8000804:	1e03      	subs	r3, r0, #0
 8000806:	d001      	beq.n	800080c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000808:	f000 f9ce 	bl	8000ba8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_I2C2_Init+0x78>)
 800080e:	2100      	movs	r1, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f001 f985 	bl	8001b20 <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800081a:	f000 f9c5 	bl	8000ba8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_I2C2_Init+0x78>)
 8000820:	2100      	movs	r1, #0
 8000822:	0018      	movs	r0, r3
 8000824:	f001 f9c8 	bl	8001bb8 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800082c:	f000 f9bc 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	20000074 	.word	0x20000074
 800083c:	40005800 	.word	0x40005800

08000840 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	2310      	movs	r3, #16
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	2308      	movs	r3, #8
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f003 f84f 	bl	80038f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	003b      	movs	r3, r7
 8000858:	0018      	movs	r0, r3
 800085a:	2310      	movs	r3, #16
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f003 f848 	bl	80038f4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <MX_TIM2_Init+0xf4>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	05d2      	lsls	r2, r2, #23
 800086a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <MX_TIM2_Init+0xf4>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <MX_TIM2_Init+0xf4>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000878:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <MX_TIM2_Init+0xf4>)
 800087a:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <MX_TIM2_Init+0xf8>)
 800087c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <MX_TIM2_Init+0xf4>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <MX_TIM2_Init+0xf4>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800088a:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <MX_TIM2_Init+0xf4>)
 800088c:	0018      	movs	r0, r3
 800088e:	f002 f8a3 	bl	80029d8 <HAL_TIM_PWM_Init>
 8000892:	1e03      	subs	r3, r0, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000896:	f000 f987 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2110      	movs	r1, #16
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_TIM2_Init+0xf4>)
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 faf0 	bl	8002e94 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80008b8:	f000 f976 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	003b      	movs	r3, r7
 80008be:	2260      	movs	r2, #96	; 0x60
 80008c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	003b      	movs	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ce:	003b      	movs	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d4:	0039      	movs	r1, r7
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <MX_TIM2_Init+0xf4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	0018      	movs	r0, r3
 80008dc:	f002 f8bc 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80008e4:	f000 f960 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e8:	0039      	movs	r1, r7
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_TIM2_Init+0xf4>)
 80008ec:	2204      	movs	r2, #4
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 f8b2 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80008f8:	f000 f956 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fc:	0039      	movs	r1, r7
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_TIM2_Init+0xf4>)
 8000900:	2208      	movs	r2, #8
 8000902:	0018      	movs	r0, r3
 8000904:	f002 f8a8 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800090c:	f000 f94c 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000910:	0039      	movs	r1, r7
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_TIM2_Init+0xf4>)
 8000914:	220c      	movs	r2, #12
 8000916:	0018      	movs	r0, r3
 8000918:	f002 f89e 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8000920:	f000 f942 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <MX_TIM2_Init+0xf4>)
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fa5a 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	b006      	add	sp, #24
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000184 	.word	0x20000184
 8000938:	0000ffff 	.word	0x0000ffff

0800093c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000942:	2310      	movs	r3, #16
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	0018      	movs	r0, r3
 8000948:	2308      	movs	r3, #8
 800094a:	001a      	movs	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	f002 ffd1 	bl	80038f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000952:	003b      	movs	r3, r7
 8000954:	0018      	movs	r0, r3
 8000956:	2310      	movs	r3, #16
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f002 ffca 	bl	80038f4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_TIM21_Init+0xcc>)
 8000962:	4a2a      	ldr	r2, [pc, #168]	; (8000a0c <MX_TIM21_Init+0xd0>)
 8000964:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000966:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <MX_TIM21_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_TIM21_Init+0xcc>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <MX_TIM21_Init+0xcc>)
 8000974:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <MX_TIM21_Init+0xd4>)
 8000976:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_TIM21_Init+0xcc>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_TIM21_Init+0xcc>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_TIM21_Init+0xcc>)
 8000986:	0018      	movs	r0, r3
 8000988:	f002 f826 	bl	80029d8 <HAL_TIM_PWM_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000990:	f000 f90a 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2110      	movs	r1, #16
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80009a2:	187a      	adds	r2, r7, r1
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_TIM21_Init+0xcc>)
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fa73 	bl	8002e94 <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 80009b2:	f000 f8f9 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	003b      	movs	r3, r7
 80009b8:	2260      	movs	r2, #96	; 0x60
 80009ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009bc:	003b      	movs	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	003b      	movs	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c8:	003b      	movs	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ce:	0039      	movs	r1, r7
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_TIM21_Init+0xcc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 f83f 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM21_Init+0xa6>
  {
    Error_Handler();
 80009de:	f000 f8e3 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009e2:	0039      	movs	r1, r7
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_TIM21_Init+0xcc>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	0018      	movs	r0, r3
 80009ea:	f002 f835 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM21_Init+0xba>
  {
    Error_Handler();
 80009f2:	f000 f8d9 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <MX_TIM21_Init+0xcc>)
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 f9f1 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b006      	add	sp, #24
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000220 	.word	0x20000220
 8000a0c:	40010800 	.word	0x40010800
 8000a10:	0000ffff 	.word	0x0000ffff

08000a14 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1a:	2310      	movs	r3, #16
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	2308      	movs	r3, #8
 8000a22:	001a      	movs	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	f002 ff65 	bl	80038f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	2310      	movs	r3, #16
 8000a30:	001a      	movs	r2, r3
 8000a32:	2100      	movs	r1, #0
 8000a34:	f002 ff5e 	bl	80038f4 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000a3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ae4 <MX_TIM22_Init+0xd0>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 65535;
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000a4c:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <MX_TIM22_Init+0xd4>)
 8000a4e:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f001 ffba 	bl	80029d8 <HAL_TIM_PWM_Init>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 f89e 	bl	8000ba8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2110      	movs	r1, #16
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000a7a:	187a      	adds	r2, r7, r1
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000a7e:	0011      	movs	r1, r2
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 fa07 	bl	8002e94 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM22_Init+0x7a>
  {
    Error_Handler();
 8000a8a:	f000 f88d 	bl	8000ba8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2260      	movs	r2, #96	; 0x60
 8000a92:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa6:	0039      	movs	r1, r7
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 ffd3 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM22_Init+0xa6>
  {
    Error_Handler();
 8000ab6:	f000 f877 	bl	8000ba8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aba:	0039      	movs	r1, r7
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000abe:	2204      	movs	r2, #4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f001 ffc9 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <MX_TIM22_Init+0xba>
  {
    Error_Handler();
 8000aca:	f000 f86d 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <MX_TIM22_Init+0xcc>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 f985 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b006      	add	sp, #24
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	200000c0 	.word	0x200000c0
 8000ae4:	40011400 	.word	0x40011400
 8000ae8:	0000ffff 	.word	0x0000ffff

08000aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_USART1_UART_Init+0x5c>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af8:	22e1      	movs	r2, #225	; 0xe1
 8000afa:	0252      	lsls	r2, r2, #9
 8000afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f002 fa07 	bl	8002f44 <HAL_UART_Init>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 f835 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000100 	.word	0x20000100
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	4013      	ands	r3, r2
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b88:	2102      	movs	r1, #2
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <MX_GPIO_Init+0x58>)
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	2202      	movs	r2, #2
 8000b94:	4013      	ands	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <Error_Handler+0x8>
	...

08000bb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_MspInit+0x24>)
 8000bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x24>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_MspInit+0x24>)
 8000bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_MspInit+0x24>)
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	0549      	lsls	r1, r1, #21
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b08b      	sub	sp, #44	; 0x2c
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	2414      	movs	r4, #20
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	0018      	movs	r0, r3
 8000bea:	2314      	movs	r3, #20
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f002 fe80 	bl	80038f4 <memset>
  if(hadc->Instance==ADC1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <HAL_ADC_MspInit+0xa8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d13d      	bne.n	8000c7a <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	0089      	lsls	r1, r1, #2
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	430a      	orrs	r2, r1
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_ADC_MspInit+0xac>)
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	2202      	movs	r2, #2
 8000c36:	4013      	ands	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	22f3      	movs	r2, #243	; 0xf3
 8000c40:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2203      	movs	r2, #3
 8000c46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	193a      	adds	r2, r7, r4
 8000c50:	23a0      	movs	r3, #160	; 0xa0
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	0011      	movs	r1, r2
 8000c56:	0018      	movs	r0, r3
 8000c58:	f000 fd56 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2203      	movs	r2, #3
 8000c60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2203      	movs	r2, #3
 8000c66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_ADC_MspInit+0xb0>)
 8000c72:	0019      	movs	r1, r3
 8000c74:	0010      	movs	r0, r2
 8000c76:	f000 fd47 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b00b      	add	sp, #44	; 0x2c
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	40012400 	.word	0x40012400
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	50000400 	.word	0x50000400

08000c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b08b      	sub	sp, #44	; 0x2c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2414      	movs	r4, #20
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	2314      	movs	r3, #20
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f002 fe26 	bl	80038f4 <memset>
  if(hi2c->Instance==I2C1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a2f      	ldr	r2, [pc, #188]	; (8000d6c <HAL_I2C_MspInit+0xdc>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d129      	bne.n	8000d06 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb6:	4b2e      	ldr	r3, [pc, #184]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000cb8:	2102      	movs	r1, #2
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cbe:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cca:	0021      	movs	r1, r4
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	22c0      	movs	r2, #192	; 0xc0
 8000cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2212      	movs	r2, #18
 8000cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <HAL_I2C_MspInit+0xe4>)
 8000cee:	0019      	movs	r1, r3
 8000cf0:	0010      	movs	r0, r2
 8000cf2:	f000 fd09 	bl	8001708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0389      	lsls	r1, r1, #14
 8000d00:	430a      	orrs	r2, r1
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d04:	e02e      	b.n	8000d64 <HAL_I2C_MspInit+0xd4>
  else if(hi2c->Instance==I2C2)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <HAL_I2C_MspInit+0xe8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d129      	bne.n	8000d64 <HAL_I2C_MspInit+0xd4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000d16:	2102      	movs	r1, #2
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	2202      	movs	r2, #2
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d28:	2114      	movs	r1, #20
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	22c0      	movs	r2, #192	; 0xc0
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2212      	movs	r2, #18
 8000d36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2203      	movs	r2, #3
 8000d42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2206      	movs	r2, #6
 8000d48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_I2C_MspInit+0xe4>)
 8000d4e:	0019      	movs	r1, r3
 8000d50:	0010      	movs	r0, r2
 8000d52:	f000 fcd9 	bl	8001708 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_I2C_MspInit+0xe0>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	03c9      	lsls	r1, r1, #15
 8000d60:	430a      	orrs	r2, r1
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b00b      	add	sp, #44	; 0x2c
 8000d6a:	bd90      	pop	{r4, r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	50000400 	.word	0x50000400
 8000d78:	40005800 	.word	0x40005800

08000d7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	05db      	lsls	r3, r3, #23
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d106      	bne.n	8000d9e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x58>)
 8000d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x58>)
 8000d96:	2101      	movs	r1, #1
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8000d9c:	e016      	b.n	8000dcc <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM21)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x5c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d106      	bne.n	8000db6 <HAL_TIM_PWM_MspInit+0x3a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000da8:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x58>)
 8000daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x58>)
 8000dae:	2104      	movs	r1, #4
 8000db0:	430a      	orrs	r2, r1
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000db4:	e00a      	b.n	8000dcc <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM22)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_TIM_PWM_MspInit+0x60>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d105      	bne.n	8000dcc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x58>)
 8000dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x58>)
 8000dc6:	2120      	movs	r1, #32
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b002      	add	sp, #8
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	40011400 	.word	0x40011400

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b08d      	sub	sp, #52	; 0x34
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	241c      	movs	r4, #28
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	0018      	movs	r0, r3
 8000dee:	2314      	movs	r3, #20
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f002 fd7e 	bl	80038f4 <memset>
  if(htim->Instance==TIM2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d15d      	bne.n	8000ec0 <HAL_TIM_MspPostInit+0xe0>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	4b58      	ldr	r3, [pc, #352]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e08:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e10:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	2201      	movs	r2, #1
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	4b52      	ldr	r3, [pc, #328]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e20:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000e22:	2102      	movs	r1, #2
 8000e24:	430a      	orrs	r2, r1
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e28:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	4013      	ands	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	697b      	ldr	r3, [r7, #20]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2202      	movs	r2, #2
 8000e50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	193a      	adds	r2, r7, r4
 8000e54:	23a0      	movs	r3, #160	; 0xa0
 8000e56:	05db      	lsls	r3, r3, #23
 8000e58:	0011      	movs	r1, r2
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 fc54 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e60:	0021      	movs	r1, r4
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	0212      	lsls	r2, r2, #8
 8000e68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	000c      	movs	r4, r1
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2202      	movs	r2, #2
 8000e70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2205      	movs	r2, #5
 8000e82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	193a      	adds	r2, r7, r4
 8000e86:	23a0      	movs	r3, #160	; 0xa0
 8000e88:	05db      	lsls	r3, r3, #23
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f000 fc3b 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e92:	0021      	movs	r1, r4
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2208      	movs	r2, #8
 8000e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2202      	movs	r2, #2
 8000eb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_TIM_MspPostInit+0x18c>)
 8000eb6:	0019      	movs	r1, r3
 8000eb8:	0010      	movs	r0, r2
 8000eba:	f000 fc25 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8000ebe:	e04f      	b.n	8000f60 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM21)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <HAL_TIM_MspPostInit+0x190>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d123      	bne.n	8000f12 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eda:	2202      	movs	r2, #2
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000ee2:	211c      	movs	r1, #28
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	22c0      	movs	r2, #192	; 0xc0
 8000ee8:	01d2      	lsls	r2, r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2202      	movs	r2, #2
 8000ef0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	187b      	adds	r3, r7, r1
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2206      	movs	r2, #6
 8000f02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_TIM_MspPostInit+0x18c>)
 8000f08:	0019      	movs	r1, r3
 8000f0a:	0010      	movs	r0, r2
 8000f0c:	f000 fbfc 	bl	8001708 <HAL_GPIO_Init>
}
 8000f10:	e026      	b.n	8000f60 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM22)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_TIM_MspPostInit+0x194>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d121      	bne.n	8000f60 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000f22:	2102      	movs	r1, #2
 8000f24:	430a      	orrs	r2, r1
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_TIM_MspPostInit+0x188>)
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f34:	211c      	movs	r1, #28
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2230      	movs	r2, #48	; 0x30
 8000f3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2202      	movs	r2, #2
 8000f40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2204      	movs	r2, #4
 8000f52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <HAL_TIM_MspPostInit+0x18c>)
 8000f58:	0019      	movs	r1, r3
 8000f5a:	0010      	movs	r0, r2
 8000f5c:	f000 fbd4 	bl	8001708 <HAL_GPIO_Init>
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b00d      	add	sp, #52	; 0x34
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	50000400 	.word	0x50000400
 8000f70:	40010800 	.word	0x40010800
 8000f74:	40011400 	.word	0x40011400

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b089      	sub	sp, #36	; 0x24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	240c      	movs	r4, #12
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	0018      	movs	r0, r3
 8000f86:	2314      	movs	r3, #20
 8000f88:	001a      	movs	r2, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	f002 fcb2 	bl	80038f4 <memset>
  if(huart->Instance==USART1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <HAL_UART_MspInit+0x80>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12a      	bne.n	8000ff0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9e:	4b17      	ldr	r3, [pc, #92]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000fa0:	2180      	movs	r1, #128	; 0x80
 8000fa2:	01c9      	lsls	r1, r1, #7
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_UART_MspInit+0x84>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fc0:	193b      	adds	r3, r7, r4
 8000fc2:	22c0      	movs	r2, #192	; 0xc0
 8000fc4:	00d2      	lsls	r2, r2, #3
 8000fc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	0021      	movs	r1, r4
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2204      	movs	r2, #4
 8000fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	187a      	adds	r2, r7, r1
 8000fe4:	23a0      	movs	r3, #160	; 0xa0
 8000fe6:	05db      	lsls	r3, r3, #23
 8000fe8:	0011      	movs	r1, r2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fb8c 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b009      	add	sp, #36	; 0x24
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40021000 	.word	0x40021000

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f886 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800103a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 800103e:	490e      	ldr	r1, [pc, #56]	; (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <LoopForever+0xe>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001044:	e002      	b.n	800104c <LoopCopyDataInit>

08001046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104a:	3304      	adds	r3, #4

0800104c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800104c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001050:	d3f9      	bcc.n	8001046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001054:	4c0b      	ldr	r4, [pc, #44]	; (8001084 <LoopForever+0x16>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001058:	e001      	b.n	800105e <LoopFillZerobss>

0800105a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800105c:	3204      	adds	r2, #4

0800105e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001060:	d3fb      	bcc.n	800105a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001062:	f7ff ffe4 	bl	800102e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f002 fc21 	bl	80038ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff fa17 	bl	800049c <main>

0800106e <LoopForever>:

LoopForever:
    b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
   ldr   r0, =_estack
 8001070:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800107c:	08003998 	.word	0x08003998
  ldr r2, =_sbss
 8001080:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001084:	20000264 	.word	0x20000264

08001088 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_COMP_IRQHandler>
	...

0800108c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_Init+0x3c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <HAL_Init+0x3c>)
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f811 	bl	80010cc <HAL_InitTick>
 80010aa:	1e03      	subs	r3, r0, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010ae:	1dfb      	adds	r3, r7, #7
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
 80010b4:	e001      	b.n	80010ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010b6:	f7ff fd7d 	bl	8000bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	40022000 	.word	0x40022000

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_InitTick+0x5c>)
 80010d6:	681c      	ldr	r4, [r3, #0]
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <HAL_InitTick+0x60>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	0019      	movs	r1, r3
 80010de:	23fa      	movs	r3, #250	; 0xfa
 80010e0:	0098      	lsls	r0, r3, #2
 80010e2:	f7ff f811 	bl	8000108 <__udivsi3>
 80010e6:	0003      	movs	r3, r0
 80010e8:	0019      	movs	r1, r3
 80010ea:	0020      	movs	r0, r4
 80010ec:	f7ff f80c 	bl	8000108 <__udivsi3>
 80010f0:	0003      	movs	r3, r0
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fafb 	bl	80016ee <HAL_SYSTICK_Config>
 80010f8:	1e03      	subs	r3, r0, #0
 80010fa:	d001      	beq.n	8001100 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e00f      	b.n	8001120 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d80b      	bhi.n	800111e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	2301      	movs	r3, #1
 800110a:	425b      	negs	r3, r3
 800110c:	2200      	movs	r2, #0
 800110e:	0018      	movs	r0, r3
 8001110:	f000 fad8 	bl	80016c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_InitTick+0x64>)
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b003      	add	sp, #12
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000008 	.word	0x20000008
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	001a      	movs	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	18d2      	adds	r2, r2, r3
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	20000008 	.word	0x20000008
 8001154:	20000260 	.word	0x20000260

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000260 	.word	0x20000260

0800116c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e159      	b.n	8001432 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10a      	bne.n	800119c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2250      	movs	r2, #80	; 0x50
 8001190:	2100      	movs	r1, #0
 8001192:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff fd20 	bl	8000bdc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a0:	2210      	movs	r2, #16
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b10      	cmp	r3, #16
 80011a6:	d005      	beq.n	80011b4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2204      	movs	r2, #4
 80011b0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011b2:	d00b      	beq.n	80011cc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b8:	2210      	movs	r2, #16
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2250      	movs	r2, #80	; 0x50
 80011c4:	2100      	movs	r1, #0
 80011c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e132      	b.n	8001432 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	4a9a      	ldr	r2, [pc, #616]	; (800143c <HAL_ADC_Init+0x2d0>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	2202      	movs	r2, #2
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2203      	movs	r2, #3
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d108      	bne.n	80011fc <HAL_ADC_Init+0x90>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_ADC_Init+0x90>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <HAL_ADC_Init+0x92>
 80011fc:	2300      	movs	r3, #0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d149      	bne.n	8001296 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	23c0      	movs	r3, #192	; 0xc0
 8001208:	061b      	lsls	r3, r3, #24
 800120a:	429a      	cmp	r2, r3
 800120c:	d00b      	beq.n	8001226 <HAL_ADC_Init+0xba>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	05db      	lsls	r3, r3, #23
 8001216:	429a      	cmp	r2, r3
 8001218:	d005      	beq.n	8001226 <HAL_ADC_Init+0xba>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	061b      	lsls	r3, r3, #24
 8001222:	429a      	cmp	r2, r3
 8001224:	d111      	bne.n	800124a <HAL_ADC_Init+0xde>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	691a      	ldr	r2, [r3, #16]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	0892      	lsrs	r2, r2, #2
 8001234:	611a      	str	r2, [r3, #16]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6919      	ldr	r1, [r3, #16]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	e014      	b.n	8001274 <HAL_ADC_Init+0x108>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	0892      	lsrs	r2, r2, #2
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	4b79      	ldr	r3, [pc, #484]	; (8001440 <HAL_ADC_Init+0x2d4>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b78      	ldr	r3, [pc, #480]	; (8001440 <HAL_ADC_Init+0x2d4>)
 8001260:	4978      	ldr	r1, [pc, #480]	; (8001444 <HAL_ADC_Init+0x2d8>)
 8001262:	400a      	ands	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	4b76      	ldr	r3, [pc, #472]	; (8001440 <HAL_ADC_Init+0x2d4>)
 8001268:	6819      	ldr	r1, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	4b74      	ldr	r3, [pc, #464]	; (8001440 <HAL_ADC_Init+0x2d4>)
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2118      	movs	r1, #24
 8001280:	438a      	bics	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68d9      	ldr	r1, [r3, #12]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001296:	4b6a      	ldr	r3, [pc, #424]	; (8001440 <HAL_ADC_Init+0x2d4>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b69      	ldr	r3, [pc, #420]	; (8001440 <HAL_ADC_Init+0x2d4>)
 800129c:	496a      	ldr	r1, [pc, #424]	; (8001448 <HAL_ADC_Init+0x2dc>)
 800129e:	400a      	ands	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80012a2:	4b67      	ldr	r3, [pc, #412]	; (8001440 <HAL_ADC_Init+0x2d4>)
 80012a4:	6819      	ldr	r1, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	065a      	lsls	r2, r3, #25
 80012ac:	4b64      	ldr	r3, [pc, #400]	; (8001440 <HAL_ADC_Init+0x2d4>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	055b      	lsls	r3, r3, #21
 80012bc:	4013      	ands	r3, r2
 80012be:	d108      	bne.n	80012d2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0549      	lsls	r1, r1, #21
 80012ce:	430a      	orrs	r2, r1
 80012d0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	495b      	ldr	r1, [pc, #364]	; (800144c <HAL_ADC_Init+0x2e0>)
 80012de:	400a      	ands	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68d9      	ldr	r1, [r3, #12]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d101      	bne.n	80012f8 <HAL_ADC_Init+0x18c>
 80012f4:	2304      	movs	r3, #4
 80012f6:	e000      	b.n	80012fa <HAL_ADC_Init+0x18e>
 80012f8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012fa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2020      	movs	r0, #32
 8001300:	5c1b      	ldrb	r3, [r3, r0]
 8001302:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001304:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	202c      	movs	r0, #44	; 0x2c
 800130a:	5c1b      	ldrb	r3, [r3, r0]
 800130c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800130e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001314:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800131c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001324:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	430a      	orrs	r2, r1
 800132c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001332:	23c2      	movs	r3, #194	; 0xc2
 8001334:	33ff      	adds	r3, #255	; 0xff
 8001336:	429a      	cmp	r2, r3
 8001338:	d00b      	beq.n	8001352 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68d9      	ldr	r1, [r3, #12]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2221      	movs	r2, #33	; 0x21
 8001356:	5c9b      	ldrb	r3, [r3, r2]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d11a      	bne.n	8001392 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2220      	movs	r2, #32
 8001360:	5c9b      	ldrb	r3, [r3, r2]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0249      	lsls	r1, r1, #9
 8001374:	430a      	orrs	r2, r1
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	e00b      	b.n	8001392 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137e:	2220      	movs	r2, #32
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	2201      	movs	r2, #1
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001396:	2b01      	cmp	r3, #1
 8001398:	d11f      	bne.n	80013da <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	492a      	ldr	r1, [pc, #168]	; (8001450 <HAL_ADC_Init+0x2e4>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6919      	ldr	r1, [r3, #16]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013b8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80013be:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	e00e      	b.n	80013f8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d107      	bne.n	80013f8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2101      	movs	r1, #1
 80013f4:	438a      	bics	r2, r1
 80013f6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2107      	movs	r1, #7
 8001404:	438a      	bics	r2, r1
 8001406:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6959      	ldr	r1, [r3, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	2203      	movs	r2, #3
 8001426:	4393      	bics	r3, r2
 8001428:	2201      	movs	r2, #1
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	fffffefd 	.word	0xfffffefd
 8001440:	40012708 	.word	0x40012708
 8001444:	ffc3ffff 	.word	0xffc3ffff
 8001448:	fdffffff 	.word	0xfdffffff
 800144c:	fffe0219 	.word	0xfffe0219
 8001450:	fffffc03 	.word	0xfffffc03

08001454 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2250      	movs	r2, #80	; 0x50
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_ADC_ConfigChannel+0x18>
 8001468:	2302      	movs	r3, #2
 800146a:	e06c      	b.n	8001546 <HAL_ADC_ConfigChannel+0xf2>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2250      	movs	r2, #80	; 0x50
 8001470:	2101      	movs	r1, #1
 8001472:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2204      	movs	r2, #4
 800147c:	4013      	ands	r3, r2
 800147e:	d00b      	beq.n	8001498 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001484:	2220      	movs	r2, #32
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2250      	movs	r2, #80	; 0x50
 8001490:	2100      	movs	r1, #0
 8001492:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e056      	b.n	8001546 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	4a2c      	ldr	r2, [pc, #176]	; (8001550 <HAL_ADC_ConfigChannel+0xfc>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d028      	beq.n	80014f4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	035b      	lsls	r3, r3, #13
 80014ae:	0b5a      	lsrs	r2, r3, #13
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	02db      	lsls	r3, r3, #11
 80014c0:	4013      	ands	r3, r2
 80014c2:	d009      	beq.n	80014d8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80014c4:	4b23      	ldr	r3, [pc, #140]	; (8001554 <HAL_ADC_ConfigChannel+0x100>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b22      	ldr	r3, [pc, #136]	; (8001554 <HAL_ADC_ConfigChannel+0x100>)
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	430a      	orrs	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f000 f844 	bl	8001560 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	029b      	lsls	r3, r3, #10
 80014e0:	4013      	ands	r3, r2
 80014e2:	d02b      	beq.n	800153c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_ADC_ConfigChannel+0x100>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_ADC_ConfigChannel+0x100>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	03c9      	lsls	r1, r1, #15
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e023      	b.n	800153c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	035b      	lsls	r3, r3, #13
 8001500:	0b5b      	lsrs	r3, r3, #13
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	02db      	lsls	r3, r3, #11
 8001514:	4013      	ands	r3, r2
 8001516:	d005      	beq.n	8001524 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_ADC_ConfigChannel+0x100>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_ADC_ConfigChannel+0x100>)
 800151e:	490e      	ldr	r1, [pc, #56]	; (8001558 <HAL_ADC_ConfigChannel+0x104>)
 8001520:	400a      	ands	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	029b      	lsls	r3, r3, #10
 800152c:	4013      	ands	r3, r2
 800152e:	d005      	beq.n	800153c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_ADC_ConfigChannel+0x100>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b07      	ldr	r3, [pc, #28]	; (8001554 <HAL_ADC_ConfigChannel+0x100>)
 8001536:	4909      	ldr	r1, [pc, #36]	; (800155c <HAL_ADC_ConfigChannel+0x108>)
 8001538:	400a      	ands	r2, r1
 800153a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2250      	movs	r2, #80	; 0x50
 8001540:	2100      	movs	r1, #0
 8001542:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	00001001 	.word	0x00001001
 8001554:	40012708 	.word	0x40012708
 8001558:	ff7fffff 	.word	0xff7fffff
 800155c:	ffbfffff 	.word	0xffbfffff

08001560 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <ADC_DelayMicroSecond+0x38>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	490b      	ldr	r1, [pc, #44]	; (800159c <ADC_DelayMicroSecond+0x3c>)
 800156e:	0018      	movs	r0, r3
 8001570:	f7fe fdca 	bl	8000108 <__udivsi3>
 8001574:	0003      	movs	r3, r0
 8001576:	001a      	movs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4353      	muls	r3, r2
 800157c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800157e:	e002      	b.n	8001586 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3b01      	subs	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f9      	bne.n	8001580 <ADC_DelayMicroSecond+0x20>
  } 
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	46bd      	mov	sp, r7
 8001592:	b004      	add	sp, #16
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	20000000 	.word	0x20000000
 800159c:	000f4240 	.word	0x000f4240

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	0002      	movs	r2, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b7f      	cmp	r3, #127	; 0x7f
 80015b4:	d828      	bhi.n	8001608 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b6:	4a2f      	ldr	r2, [pc, #188]	; (8001674 <__NVIC_SetPriority+0xd4>)
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	33c0      	adds	r3, #192	; 0xc0
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	589b      	ldr	r3, [r3, r2]
 80015c6:	1dfa      	adds	r2, r7, #7
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	0011      	movs	r1, r2
 80015cc:	2203      	movs	r2, #3
 80015ce:	400a      	ands	r2, r1
 80015d0:	00d2      	lsls	r2, r2, #3
 80015d2:	21ff      	movs	r1, #255	; 0xff
 80015d4:	4091      	lsls	r1, r2
 80015d6:	000a      	movs	r2, r1
 80015d8:	43d2      	mvns	r2, r2
 80015da:	401a      	ands	r2, r3
 80015dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	22ff      	movs	r2, #255	; 0xff
 80015e4:	401a      	ands	r2, r3
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	0018      	movs	r0, r3
 80015ec:	2303      	movs	r3, #3
 80015ee:	4003      	ands	r3, r0
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f4:	481f      	ldr	r0, [pc, #124]	; (8001674 <__NVIC_SetPriority+0xd4>)
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	430a      	orrs	r2, r1
 8001600:	33c0      	adds	r3, #192	; 0xc0
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001606:	e031      	b.n	800166c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001608:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <__NVIC_SetPriority+0xd8>)
 800160a:	1dfb      	adds	r3, r7, #7
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	0019      	movs	r1, r3
 8001610:	230f      	movs	r3, #15
 8001612:	400b      	ands	r3, r1
 8001614:	3b08      	subs	r3, #8
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3306      	adds	r3, #6
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	18d3      	adds	r3, r2, r3
 800161e:	3304      	adds	r3, #4
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	1dfa      	adds	r2, r7, #7
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	0011      	movs	r1, r2
 8001628:	2203      	movs	r2, #3
 800162a:	400a      	ands	r2, r1
 800162c:	00d2      	lsls	r2, r2, #3
 800162e:	21ff      	movs	r1, #255	; 0xff
 8001630:	4091      	lsls	r1, r2
 8001632:	000a      	movs	r2, r1
 8001634:	43d2      	mvns	r2, r2
 8001636:	401a      	ands	r2, r3
 8001638:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	019b      	lsls	r3, r3, #6
 800163e:	22ff      	movs	r2, #255	; 0xff
 8001640:	401a      	ands	r2, r3
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	0018      	movs	r0, r3
 8001648:	2303      	movs	r3, #3
 800164a:	4003      	ands	r3, r0
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <__NVIC_SetPriority+0xd8>)
 8001652:	1dfb      	adds	r3, r7, #7
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	001c      	movs	r4, r3
 8001658:	230f      	movs	r3, #15
 800165a:	4023      	ands	r3, r4
 800165c:	3b08      	subs	r3, #8
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	430a      	orrs	r2, r1
 8001662:	3306      	adds	r3, #6
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	18c3      	adds	r3, r0, r3
 8001668:	3304      	adds	r3, #4
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b003      	add	sp, #12
 8001672:	bd90      	pop	{r4, r7, pc}
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1e5a      	subs	r2, r3, #1
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	045b      	lsls	r3, r3, #17
 800168c:	429a      	cmp	r2, r3
 800168e:	d301      	bcc.n	8001694 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001690:	2301      	movs	r3, #1
 8001692:	e010      	b.n	80016b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <SysTick_Config+0x44>)
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	3a01      	subs	r2, #1
 800169a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169c:	2301      	movs	r3, #1
 800169e:	425b      	negs	r3, r3
 80016a0:	2103      	movs	r1, #3
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7ff ff7c 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x44>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x44>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b002      	add	sp, #8
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	210f      	movs	r1, #15
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	1c02      	adds	r2, r0, #0
 80016d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	0011      	movs	r1, r2
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b004      	add	sp, #16
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	0018      	movs	r0, r3
 80016fa:	f7ff ffbf 	bl	800167c <SysTick_Config>
 80016fe:	0003      	movs	r3, r0
}
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800171e:	e14f      	b.n	80019c0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4091      	lsls	r1, r2
 800172a:	000a      	movs	r2, r1
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d100      	bne.n	8001738 <HAL_GPIO_Init+0x30>
 8001736:	e140      	b.n	80019ba <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2203      	movs	r2, #3
 800173e:	4013      	ands	r3, r2
 8001740:	2b01      	cmp	r3, #1
 8001742:	d005      	beq.n	8001750 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800174c:	2b02      	cmp	r3, #2
 800174e:	d130      	bne.n	80017b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	409a      	lsls	r2, r3
 800175e:	0013      	movs	r3, r2
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001786:	2201      	movs	r2, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
 800178c:	0013      	movs	r3, r2
 800178e:	43da      	mvns	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	2201      	movs	r2, #1
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
 80017a4:	0013      	movs	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2203      	movs	r2, #3
 80017b8:	4013      	ands	r3, r2
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d017      	beq.n	80017ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d123      	bne.n	8001842 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	58d3      	ldr	r3, [r2, r3]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2207      	movs	r2, #7
 800180c:	4013      	ands	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	43da      	mvns	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2107      	movs	r1, #7
 8001826:	400b      	ands	r3, r1
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	0092      	lsls	r2, r2, #2
 800183e:	6939      	ldr	r1, [r7, #16]
 8001840:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2203      	movs	r2, #3
 8001860:	401a      	ands	r2, r3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	23c0      	movs	r3, #192	; 0xc0
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d100      	bne.n	8001884 <HAL_GPIO_Init+0x17c>
 8001882:	e09a      	b.n	80019ba <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001884:	4b54      	ldr	r3, [pc, #336]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800188a:	2101      	movs	r1, #1
 800188c:	430a      	orrs	r2, r1
 800188e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001890:	4a52      	ldr	r2, [pc, #328]	; (80019dc <HAL_GPIO_Init+0x2d4>)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	589b      	ldr	r3, [r3, r2]
 800189c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	2203      	movs	r2, #3
 80018a2:	4013      	ands	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	409a      	lsls	r2, r3
 80018aa:	0013      	movs	r3, r2
 80018ac:	43da      	mvns	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	23a0      	movs	r3, #160	; 0xa0
 80018b8:	05db      	lsls	r3, r3, #23
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d019      	beq.n	80018f2 <HAL_GPIO_Init+0x1ea>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a47      	ldr	r2, [pc, #284]	; (80019e0 <HAL_GPIO_Init+0x2d8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x1e6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a46      	ldr	r2, [pc, #280]	; (80019e4 <HAL_GPIO_Init+0x2dc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00d      	beq.n	80018ea <HAL_GPIO_Init+0x1e2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a45      	ldr	r2, [pc, #276]	; (80019e8 <HAL_GPIO_Init+0x2e0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x1de>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a44      	ldr	r2, [pc, #272]	; (80019ec <HAL_GPIO_Init+0x2e4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_GPIO_Init+0x1da>
 80018de:	2305      	movs	r3, #5
 80018e0:	e008      	b.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e006      	b.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018e6:	2303      	movs	r3, #3
 80018e8:	e004      	b.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e002      	b.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018f2:	2300      	movs	r3, #0
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	2103      	movs	r1, #3
 80018f8:	400a      	ands	r2, r1
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	4093      	lsls	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001904:	4935      	ldr	r1, [pc, #212]	; (80019dc <HAL_GPIO_Init+0x2d4>)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001912:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	025b      	lsls	r3, r3, #9
 800192a:	4013      	ands	r3, r2
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001936:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800193c:	4b2c      	ldr	r3, [pc, #176]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43da      	mvns	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	029b      	lsls	r3, r3, #10
 8001954:	4013      	ands	r3, r2
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001960:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	035b      	lsls	r3, r3, #13
 800197e:	4013      	ands	r3, r2
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800198a:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43da      	mvns	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	039b      	lsls	r3, r3, #14
 80019a8:	4013      	ands	r3, r2
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_GPIO_Init+0x2e8>)
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	40da      	lsrs	r2, r3
 80019c8:	1e13      	subs	r3, r2, #0
 80019ca:	d000      	beq.n	80019ce <HAL_GPIO_Init+0x2c6>
 80019cc:	e6a8      	b.n	8001720 <HAL_GPIO_Init+0x18>
  }
}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46c0      	nop			; (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b006      	add	sp, #24
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000
 80019e0:	50000400 	.word	0x50000400
 80019e4:	50000800 	.word	0x50000800
 80019e8:	50000c00 	.word	0x50000c00
 80019ec:	50001c00 	.word	0x50001c00
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e082      	b.n	8001b0c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2241      	movs	r2, #65	; 0x41
 8001a0a:	5c9b      	ldrb	r3, [r3, r2]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2240      	movs	r2, #64	; 0x40
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7ff f937 	bl	8000c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2241      	movs	r2, #65	; 0x41
 8001a26:	2124      	movs	r1, #36	; 0x24
 8001a28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	438a      	bics	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4934      	ldr	r1, [pc, #208]	; (8001b14 <HAL_I2C_Init+0x120>)
 8001a44:	400a      	ands	r2, r1
 8001a46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4931      	ldr	r1, [pc, #196]	; (8001b18 <HAL_I2C_Init+0x124>)
 8001a54:	400a      	ands	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d108      	bne.n	8001a72 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	0209      	lsls	r1, r1, #8
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	e007      	b.n	8001a82 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2184      	movs	r1, #132	; 0x84
 8001a7c:	0209      	lsls	r1, r1, #8
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d104      	bne.n	8001a94 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	491f      	ldr	r1, [pc, #124]	; (8001b1c <HAL_I2C_Init+0x128>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	491a      	ldr	r1, [pc, #104]	; (8001b18 <HAL_I2C_Init+0x124>)
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69d9      	ldr	r1, [r3, #28]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1a      	ldr	r2, [r3, #32]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2241      	movs	r2, #65	; 0x41
 8001af8:	2120      	movs	r1, #32
 8001afa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2242      	movs	r2, #66	; 0x42
 8001b06:	2100      	movs	r1, #0
 8001b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	f0ffffff 	.word	0xf0ffffff
 8001b18:	ffff7fff 	.word	0xffff7fff
 8001b1c:	02008000 	.word	0x02008000

08001b20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2241      	movs	r2, #65	; 0x41
 8001b2e:	5c9b      	ldrb	r3, [r3, r2]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d138      	bne.n	8001ba8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	5c9b      	ldrb	r3, [r3, r2]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e032      	b.n	8001baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2240      	movs	r2, #64	; 0x40
 8001b48:	2101      	movs	r1, #1
 8001b4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2241      	movs	r2, #65	; 0x41
 8001b50:	2124      	movs	r1, #36	; 0x24
 8001b52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2101      	movs	r1, #1
 8001b60:	438a      	bics	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b70:	400a      	ands	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2241      	movs	r2, #65	; 0x41
 8001b98:	2120      	movs	r1, #32
 8001b9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e000      	b.n	8001baa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	0018      	movs	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	ffffefff 	.word	0xffffefff

08001bb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2241      	movs	r2, #65	; 0x41
 8001bc6:	5c9b      	ldrb	r3, [r3, r2]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d139      	bne.n	8001c42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2240      	movs	r2, #64	; 0x40
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e033      	b.n	8001c44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	2101      	movs	r1, #1
 8001be2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2241      	movs	r2, #65	; 0x41
 8001be8:	2124      	movs	r1, #36	; 0x24
 8001bea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2241      	movs	r2, #65	; 0x41
 8001c32:	2120      	movs	r1, #32
 8001c34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2240      	movs	r2, #64	; 0x40
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c42:	2302      	movs	r3, #2
  }
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	fffff0ff 	.word	0xfffff0ff

08001c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c50:	b5b0      	push	{r4, r5, r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d102      	bne.n	8001c64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f000 fb5a 	bl	8002318 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c64:	4bce      	ldr	r3, [pc, #824]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	220c      	movs	r2, #12
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c6e:	4bcc      	ldr	r3, [pc, #816]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	025b      	lsls	r3, r3, #9
 8001c76:	4013      	ands	r3, r2
 8001c78:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4013      	ands	r3, r2
 8001c82:	d100      	bne.n	8001c86 <HAL_RCC_OscConfig+0x36>
 8001c84:	e07c      	b.n	8001d80 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d007      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d111      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x66>
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	025b      	lsls	r3, r3, #9
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	4bc0      	ldr	r3, [pc, #768]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	029b      	lsls	r3, r3, #10
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d100      	bne.n	8001caa <HAL_RCC_OscConfig+0x5a>
 8001ca8:	e069      	b.n	8001d7e <HAL_RCC_OscConfig+0x12e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d165      	bne.n	8001d7e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e330      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x82>
 8001cc2:	4bb7      	ldr	r3, [pc, #732]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4bb6      	ldr	r3, [pc, #728]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001cc8:	2180      	movs	r1, #128	; 0x80
 8001cca:	0249      	lsls	r1, r1, #9
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e027      	b.n	8001d22 <HAL_RCC_OscConfig+0xd2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	23a0      	movs	r3, #160	; 0xa0
 8001cd8:	02db      	lsls	r3, r3, #11
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d10e      	bne.n	8001cfc <HAL_RCC_OscConfig+0xac>
 8001cde:	4bb0      	ldr	r3, [pc, #704]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4baf      	ldr	r3, [pc, #700]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	02c9      	lsls	r1, r1, #11
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	4bac      	ldr	r3, [pc, #688]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4bab      	ldr	r3, [pc, #684]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001cf2:	2180      	movs	r1, #128	; 0x80
 8001cf4:	0249      	lsls	r1, r1, #9
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	e012      	b.n	8001d22 <HAL_RCC_OscConfig+0xd2>
 8001cfc:	4ba8      	ldr	r3, [pc, #672]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4ba7      	ldr	r3, [pc, #668]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001d02:	49a8      	ldr	r1, [pc, #672]	; (8001fa4 <HAL_RCC_OscConfig+0x354>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4ba5      	ldr	r3, [pc, #660]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	025b      	lsls	r3, r3, #9
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4ba2      	ldr	r3, [pc, #648]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4ba1      	ldr	r3, [pc, #644]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001d1c:	49a2      	ldr	r1, [pc, #648]	; (8001fa8 <HAL_RCC_OscConfig+0x358>)
 8001d1e:	400a      	ands	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d014      	beq.n	8001d54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff fa15 	bl	8001158 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d34:	f7ff fa10 	bl	8001158 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b64      	cmp	r3, #100	; 0x64
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e2e8      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d46:	4b96      	ldr	r3, [pc, #600]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	; 0x80
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe4>
 8001d52:	e015      	b.n	8001d80 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff fa00 	bl	8001158 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5e:	f7ff f9fb 	bl	8001158 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	; 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e2d3      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d70:	4b8b      	ldr	r3, [pc, #556]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	029b      	lsls	r3, r3, #10
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x10e>
 8001d7c:	e000      	b.n	8001d80 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d100      	bne.n	8001d8c <HAL_RCC_OscConfig+0x13c>
 8001d8a:	e08b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d13e      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1cc>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d13b      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001da4:	4b7e      	ldr	r3, [pc, #504]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2204      	movs	r2, #4
 8001daa:	4013      	ands	r3, r2
 8001dac:	d004      	beq.n	8001db8 <HAL_RCC_OscConfig+0x168>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e2af      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a7b      	ldr	r2, [pc, #492]	; (8001fac <HAL_RCC_OscConfig+0x35c>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	021a      	lsls	r2, r3, #8
 8001dc8:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001dce:	4b74      	ldr	r3, [pc, #464]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2209      	movs	r2, #9
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	4b71      	ldr	r3, [pc, #452]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de0:	f000 fbe8 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8001de4:	0001      	movs	r1, r0
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	220f      	movs	r2, #15
 8001dee:	4013      	ands	r3, r2
 8001df0:	4a6f      	ldr	r2, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x360>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	000a      	movs	r2, r1
 8001df6:	40da      	lsrs	r2, r3
 8001df8:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x364>)
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001dfc:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x368>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2513      	movs	r5, #19
 8001e02:	197c      	adds	r4, r7, r5
 8001e04:	0018      	movs	r0, r3
 8001e06:	f7ff f961 	bl	80010cc <HAL_InitTick>
 8001e0a:	0003      	movs	r3, r0
 8001e0c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e0e:	197b      	adds	r3, r7, r5
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d046      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8001e16:	197b      	adds	r3, r7, r5
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	e27d      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d027      	beq.n	8001e72 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e22:	4b5f      	ldr	r3, [pc, #380]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2209      	movs	r2, #9
 8001e28:	4393      	bics	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	4b5c      	ldr	r3, [pc, #368]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff f990 	bl	8001158 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3e:	f7ff f98b 	bl	8001158 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e263      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e50:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2204      	movs	r2, #4
 8001e56:	4013      	ands	r3, r2
 8001e58:	d0f1      	beq.n	8001e3e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4a53      	ldr	r2, [pc, #332]	; (8001fac <HAL_RCC_OscConfig+0x35c>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	021a      	lsls	r2, r3, #8
 8001e6a:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	e018      	b.n	8001ea4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e72:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001e78:	2101      	movs	r1, #1
 8001e7a:	438a      	bics	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff f96b 	bl	8001158 <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e88:	f7ff f966 	bl	8001158 <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e23e      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e9a:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d1f1      	bne.n	8001e88 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d100      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x260>
 8001eae:	e0a1      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d140      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d005      	beq.n	8001ece <HAL_RCC_OscConfig+0x27e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e224      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <HAL_RCC_OscConfig+0x36c>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	0a19      	lsrs	r1, r3, #8
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	061a      	lsls	r2, r3, #24
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	0b5b      	lsrs	r3, r3, #13
 8001efc:	3301      	adds	r3, #1
 8001efe:	2280      	movs	r2, #128	; 0x80
 8001f00:	0212      	lsls	r2, r2, #8
 8001f02:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f04:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	400b      	ands	r3, r1
 8001f0e:	4928      	ldr	r1, [pc, #160]	; (8001fb0 <HAL_RCC_OscConfig+0x360>)
 8001f10:	5ccb      	ldrb	r3, [r1, r3]
 8001f12:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x364>)
 8001f16:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x368>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2513      	movs	r5, #19
 8001f1e:	197c      	adds	r4, r7, r5
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff f8d3 	bl	80010cc <HAL_InitTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f2a:	197b      	adds	r3, r7, r5
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d060      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8001f32:	197b      	adds	r3, r7, r5
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	e1ef      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03f      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0049      	lsls	r1, r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff f903 	bl	8001158 <HAL_GetTick>
 8001f52:	0003      	movs	r3, r0
 8001f54:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f58:	f7ff f8fe 	bl	8001158 <HAL_GetTick>
 8001f5c:	0002      	movs	r2, r0
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1d6      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4013      	ands	r3, r2
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x36c>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	0a19      	lsrs	r1, r3, #8
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	061a      	lsls	r2, r3, #24
 8001f98:	4b01      	ldr	r3, [pc, #4]	; (8001fa0 <HAL_RCC_OscConfig+0x350>)
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	e029      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3a4>
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	fffeffff 	.word	0xfffeffff
 8001fa8:	fffbffff 	.word	0xfffbffff
 8001fac:	ffffe0ff 	.word	0xffffe0ff
 8001fb0:	0800391c 	.word	0x0800391c
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fc0:	4bbe      	ldr	r3, [pc, #760]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4bbd      	ldr	r3, [pc, #756]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8001fc6:	49be      	ldr	r1, [pc, #760]	; (80022c0 <HAL_RCC_OscConfig+0x670>)
 8001fc8:	400a      	ands	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff f8c4 	bl	8001158 <HAL_GetTick>
 8001fd0:	0003      	movs	r3, r0
 8001fd2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f8bf 	bl	8001158 <HAL_GetTick>
 8001fda:	0002      	movs	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e197      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fe8:	4bb4      	ldr	r3, [pc, #720]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d1f0      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d036      	beq.n	800206c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d019      	beq.n	800203a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002006:	4bad      	ldr	r3, [pc, #692]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800200a:	4bac      	ldr	r3, [pc, #688]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800200c:	2101      	movs	r1, #1
 800200e:	430a      	orrs	r2, r1
 8002010:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002012:	f7ff f8a1 	bl	8001158 <HAL_GetTick>
 8002016:	0003      	movs	r3, r0
 8002018:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff f89c 	bl	8001158 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e174      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800202e:	4ba3      	ldr	r3, [pc, #652]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d0f1      	beq.n	800201c <HAL_RCC_OscConfig+0x3cc>
 8002038:	e018      	b.n	800206c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203a:	4ba0      	ldr	r3, [pc, #640]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800203c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800203e:	4b9f      	ldr	r3, [pc, #636]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002040:	2101      	movs	r1, #1
 8002042:	438a      	bics	r2, r1
 8002044:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff f887 	bl	8001158 <HAL_GetTick>
 800204a:	0003      	movs	r3, r0
 800204c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff f882 	bl	8001158 <HAL_GetTick>
 8002054:	0002      	movs	r2, r0
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e15a      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002062:	4b96      	ldr	r3, [pc, #600]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d1f1      	bne.n	8002050 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2204      	movs	r2, #4
 8002072:	4013      	ands	r3, r2
 8002074:	d100      	bne.n	8002078 <HAL_RCC_OscConfig+0x428>
 8002076:	e0ae      	b.n	80021d6 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002078:	2027      	movs	r0, #39	; 0x27
 800207a:	183b      	adds	r3, r7, r0
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002080:	4b8e      	ldr	r3, [pc, #568]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	055b      	lsls	r3, r3, #21
 8002088:	4013      	ands	r3, r2
 800208a:	d109      	bne.n	80020a0 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800208e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002090:	4b8a      	ldr	r3, [pc, #552]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002092:	2180      	movs	r1, #128	; 0x80
 8002094:	0549      	lsls	r1, r1, #21
 8002096:	430a      	orrs	r2, r1
 8002098:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800209a:	183b      	adds	r3, r7, r0
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x674>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	d11a      	bne.n	80020e2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ac:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <HAL_RCC_OscConfig+0x674>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <HAL_RCC_OscConfig+0x674>)
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	0049      	lsls	r1, r1, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f84d 	bl	8001158 <HAL_GetTick>
 80020be:	0003      	movs	r3, r0
 80020c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c4:	f7ff f848 	bl	8001158 <HAL_GetTick>
 80020c8:	0002      	movs	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e120      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b7b      	ldr	r3, [pc, #492]	; (80022c4 <HAL_RCC_OscConfig+0x674>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_OscConfig+0x4ae>
 80020ee:	4b73      	ldr	r3, [pc, #460]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 80020f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f2:	4b72      	ldr	r3, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	0049      	lsls	r1, r1, #1
 80020f8:	430a      	orrs	r2, r1
 80020fa:	651a      	str	r2, [r3, #80]	; 0x50
 80020fc:	e031      	b.n	8002162 <HAL_RCC_OscConfig+0x512>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x4d0>
 8002106:	4b6d      	ldr	r3, [pc, #436]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002108:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800210a:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800210c:	496c      	ldr	r1, [pc, #432]	; (80022c0 <HAL_RCC_OscConfig+0x670>)
 800210e:	400a      	ands	r2, r1
 8002110:	651a      	str	r2, [r3, #80]	; 0x50
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002116:	4b69      	ldr	r3, [pc, #420]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002118:	496b      	ldr	r1, [pc, #428]	; (80022c8 <HAL_RCC_OscConfig+0x678>)
 800211a:	400a      	ands	r2, r1
 800211c:	651a      	str	r2, [r3, #80]	; 0x50
 800211e:	e020      	b.n	8002162 <HAL_RCC_OscConfig+0x512>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	23a0      	movs	r3, #160	; 0xa0
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	429a      	cmp	r2, r3
 800212a:	d10e      	bne.n	800214a <HAL_RCC_OscConfig+0x4fa>
 800212c:	4b63      	ldr	r3, [pc, #396]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800212e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002130:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	00c9      	lsls	r1, r1, #3
 8002136:	430a      	orrs	r2, r1
 8002138:	651a      	str	r2, [r3, #80]	; 0x50
 800213a:	4b60      	ldr	r3, [pc, #384]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800213c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	0049      	lsls	r1, r1, #1
 8002144:	430a      	orrs	r2, r1
 8002146:	651a      	str	r2, [r3, #80]	; 0x50
 8002148:	e00b      	b.n	8002162 <HAL_RCC_OscConfig+0x512>
 800214a:	4b5c      	ldr	r3, [pc, #368]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800214c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002150:	495b      	ldr	r1, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x670>)
 8002152:	400a      	ands	r2, r1
 8002154:	651a      	str	r2, [r3, #80]	; 0x50
 8002156:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002158:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800215c:	495a      	ldr	r1, [pc, #360]	; (80022c8 <HAL_RCC_OscConfig+0x678>)
 800215e:	400a      	ands	r2, r1
 8002160:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d015      	beq.n	8002196 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216a:	f7fe fff5 	bl	8001158 <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002172:	e009      	b.n	8002188 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7fe fff0 	bl	8001158 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	4a53      	ldr	r2, [pc, #332]	; (80022cc <HAL_RCC_OscConfig+0x67c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0c7      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800218a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x524>
 8002194:	e014      	b.n	80021c0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe ffdf 	bl	8001158 <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800219e:	e009      	b.n	80021b4 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a0:	f7fe ffda 	bl	8001158 <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	4a48      	ldr	r2, [pc, #288]	; (80022cc <HAL_RCC_OscConfig+0x67c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0b1      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021b4:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 80021b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	d1ef      	bne.n	80021a0 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c0:	2327      	movs	r3, #39	; 0x27
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 80021cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 80021d0:	493f      	ldr	r1, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x680>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d100      	bne.n	80021e0 <HAL_RCC_OscConfig+0x590>
 80021de:	e09a      	b.n	8002316 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d064      	beq.n	80022b0 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d145      	bne.n	800227a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 80021f4:	4937      	ldr	r1, [pc, #220]	; (80022d4 <HAL_RCC_OscConfig+0x684>)
 80021f6:	400a      	ands	r2, r1
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe ffad 	bl	8001158 <HAL_GetTick>
 80021fe:	0003      	movs	r3, r0
 8002200:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe ffa8 	bl	8001158 <HAL_GetTick>
 8002208:	0002      	movs	r2, r0
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e080      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	049b      	lsls	r3, r3, #18
 800221e:	4013      	ands	r3, r2
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <HAL_RCC_OscConfig+0x688>)
 8002228:	4013      	ands	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	431a      	orrs	r2, r3
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800223e:	430a      	orrs	r2, r1
 8002240:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002242:	4b1e      	ldr	r3, [pc, #120]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	0449      	lsls	r1, r1, #17
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe ff82 	bl	8001158 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225a:	f7fe ff7d 	bl	8001158 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e055      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	049b      	lsls	r3, r3, #18
 8002274:	4013      	ands	r3, r2
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x60a>
 8002278:	e04d      	b.n	8002316 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 8002280:	4914      	ldr	r1, [pc, #80]	; (80022d4 <HAL_RCC_OscConfig+0x684>)
 8002282:	400a      	ands	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe ff67 	bl	8001158 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe ff62 	bl	8001158 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e03a      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x66c>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	4013      	ands	r3, r2
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x640>
 80022ae:	e032      	b.n	8002316 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d111      	bne.n	80022dc <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e02d      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	fffffeff 	.word	0xfffffeff
 80022c4:	40007000 	.word	0x40007000
 80022c8:	fffffbff 	.word	0xfffffbff
 80022cc:	00001388 	.word	0x00001388
 80022d0:	efffffff 	.word	0xefffffff
 80022d4:	feffffff 	.word	0xfeffffff
 80022d8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x6d0>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	025b      	lsls	r3, r3, #9
 80022e8:	401a      	ands	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d10f      	bne.n	8002312 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	23f0      	movs	r3, #240	; 0xf0
 80022f6:	039b      	lsls	r3, r3, #14
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d107      	bne.n	8002312 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	23c0      	movs	r3, #192	; 0xc0
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	401a      	ands	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b00a      	add	sp, #40	; 0x28
 800231e:	bdb0      	pop	{r4, r5, r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e128      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b96      	ldr	r3, [pc, #600]	; (8002594 <HAL_RCC_ClockConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2201      	movs	r2, #1
 800233e:	4013      	ands	r3, r2
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d91e      	bls.n	8002384 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b93      	ldr	r3, [pc, #588]	; (8002594 <HAL_RCC_ClockConfig+0x270>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2201      	movs	r2, #1
 800234c:	4393      	bics	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	4b90      	ldr	r3, [pc, #576]	; (8002594 <HAL_RCC_ClockConfig+0x270>)
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002358:	f7fe fefe 	bl	8001158 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002360:	e009      	b.n	8002376 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002362:	f7fe fef9 	bl	8001158 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	4a8a      	ldr	r2, [pc, #552]	; (8002598 <HAL_RCC_ClockConfig+0x274>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e109      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b87      	ldr	r3, [pc, #540]	; (8002594 <HAL_RCC_ClockConfig+0x270>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d1ee      	bne.n	8002362 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2202      	movs	r2, #2
 800238a:	4013      	ands	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238e:	4b83      	ldr	r3, [pc, #524]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	22f0      	movs	r2, #240	; 0xf0
 8002394:	4393      	bics	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d100      	bne.n	80023ae <HAL_RCC_ClockConfig+0x8a>
 80023ac:	e089      	b.n	80024c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023b6:	4b79      	ldr	r3, [pc, #484]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	029b      	lsls	r3, r3, #10
 80023be:	4013      	ands	r3, r2
 80023c0:	d120      	bne.n	8002404 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0e1      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	; 0x80
 80023d4:	049b      	lsls	r3, r3, #18
 80023d6:	4013      	ands	r3, r2
 80023d8:	d114      	bne.n	8002404 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0d5      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d106      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e6:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2204      	movs	r2, #4
 80023ec:	4013      	ands	r3, r2
 80023ee:	d109      	bne.n	8002404 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0ca      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023f4:	4b69      	ldr	r3, [pc, #420]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0c2      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002404:	4b65      	ldr	r3, [pc, #404]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2203      	movs	r2, #3
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002414:	430a      	orrs	r2, r1
 8002416:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002418:	f7fe fe9e 	bl	8001158 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d111      	bne.n	800244c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002428:	e009      	b.n	800243e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242a:	f7fe fe95 	bl	8001158 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x274>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0a5      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800243e:	4b57      	ldr	r3, [pc, #348]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	220c      	movs	r2, #12
 8002444:	4013      	ands	r3, r2
 8002446:	2b08      	cmp	r3, #8
 8002448:	d1ef      	bne.n	800242a <HAL_RCC_ClockConfig+0x106>
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d111      	bne.n	8002478 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002454:	e009      	b.n	800246a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002456:	f7fe fe7f 	bl	8001158 <HAL_GetTick>
 800245a:	0002      	movs	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	4a4d      	ldr	r2, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x274>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e08f      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800246a:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	220c      	movs	r2, #12
 8002470:	4013      	ands	r3, r2
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_ClockConfig+0x132>
 8002476:	e024      	b.n	80024c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d11b      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002480:	e009      	b.n	8002496 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002482:	f7fe fe69 	bl	8001158 <HAL_GetTick>
 8002486:	0002      	movs	r2, r0
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	4a42      	ldr	r2, [pc, #264]	; (8002598 <HAL_RCC_ClockConfig+0x274>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e079      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002496:	4b41      	ldr	r3, [pc, #260]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	220c      	movs	r2, #12
 800249c:	4013      	ands	r3, r2
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d1ef      	bne.n	8002482 <HAL_RCC_ClockConfig+0x15e>
 80024a2:	e00e      	b.n	80024c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe fe58 	bl	8001158 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_RCC_ClockConfig+0x274>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e068      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	220c      	movs	r2, #12
 80024be:	4013      	ands	r3, r2
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c2:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_RCC_ClockConfig+0x270>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d21e      	bcs.n	800250e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d0:	4b30      	ldr	r3, [pc, #192]	; (8002594 <HAL_RCC_ClockConfig+0x270>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	4393      	bics	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_RCC_ClockConfig+0x270>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024e2:	f7fe fe39 	bl	8001158 <HAL_GetTick>
 80024e6:	0003      	movs	r3, r0
 80024e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	e009      	b.n	8002500 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ec:	f7fe fe34 	bl	8001158 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	4a28      	ldr	r2, [pc, #160]	; (8002598 <HAL_RCC_ClockConfig+0x274>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e044      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <HAL_RCC_ClockConfig+0x270>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	429a      	cmp	r2, r3
 800250c:	d1ee      	bne.n	80024ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2204      	movs	r2, #4
 8002514:	4013      	ands	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b20      	ldr	r3, [pc, #128]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <HAL_RCC_ClockConfig+0x27c>)
 800251e:	4013      	ands	r3, r2
 8002520:	0019      	movs	r1, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002528:	430a      	orrs	r2, r1
 800252a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2208      	movs	r2, #8
 8002532:	4013      	ands	r3, r2
 8002534:	d00a      	beq.n	800254c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4a1a      	ldr	r2, [pc, #104]	; (80025a4 <HAL_RCC_ClockConfig+0x280>)
 800253c:	4013      	ands	r3, r2
 800253e:	0019      	movs	r1, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	00da      	lsls	r2, r3, #3
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800254c:	f000 f832 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002550:	0001      	movs	r1, r0
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_RCC_ClockConfig+0x278>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	220f      	movs	r2, #15
 800255a:	4013      	ands	r3, r2
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <HAL_RCC_ClockConfig+0x284>)
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	000a      	movs	r2, r1
 8002562:	40da      	lsrs	r2, r3
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_RCC_ClockConfig+0x288>)
 8002566:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCC_ClockConfig+0x28c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	250b      	movs	r5, #11
 800256e:	197c      	adds	r4, r7, r5
 8002570:	0018      	movs	r0, r3
 8002572:	f7fe fdab 	bl	80010cc <HAL_InitTick>
 8002576:	0003      	movs	r3, r0
 8002578:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800257a:	197b      	adds	r3, r7, r5
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002582:	197b      	adds	r3, r7, r5
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	e000      	b.n	800258a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	0018      	movs	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	b004      	add	sp, #16
 8002590:	bdb0      	pop	{r4, r5, r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	40022000 	.word	0x40022000
 8002598:	00001388 	.word	0x00001388
 800259c:	40021000 	.word	0x40021000
 80025a0:	fffff8ff 	.word	0xfffff8ff
 80025a4:	ffffc7ff 	.word	0xffffc7ff
 80025a8:	0800391c 	.word	0x0800391c
 80025ac:	20000000 	.word	0x20000000
 80025b0:	20000004 	.word	0x20000004

080025b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b5b0      	push	{r4, r5, r7, lr}
 80025b6:	b08e      	sub	sp, #56	; 0x38
 80025b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80025ba:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HAL_RCC_GetSysClockFreq+0x138>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c2:	230c      	movs	r3, #12
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d014      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x40>
 80025ca:	d900      	bls.n	80025ce <HAL_RCC_GetSysClockFreq+0x1a>
 80025cc:	e07b      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x112>
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d002      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x24>
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d00b      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x3a>
 80025d6:	e076      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025d8:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_GetSysClockFreq+0x138>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2210      	movs	r2, #16
 80025de:	4013      	ands	r3, r2
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80025e6:	e07c      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80025e8:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x140>)
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025ec:	e079      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ee:	4b42      	ldr	r3, [pc, #264]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x144>)
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025f2:	e076      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f6:	0c9a      	lsrs	r2, r3, #18
 80025f8:	230f      	movs	r3, #15
 80025fa:	401a      	ands	r2, r3
 80025fc:	4b3f      	ldr	r3, [pc, #252]	; (80026fc <HAL_RCC_GetSysClockFreq+0x148>)
 80025fe:	5c9b      	ldrb	r3, [r3, r2]
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	0d9a      	lsrs	r2, r3, #22
 8002606:	2303      	movs	r3, #3
 8002608:	4013      	ands	r3, r2
 800260a:	3301      	adds	r3, #1
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800260e:	4b37      	ldr	r3, [pc, #220]	; (80026ec <HAL_RCC_GetSysClockFreq+0x138>)
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	025b      	lsls	r3, r3, #9
 8002616:	4013      	ands	r3, r2
 8002618:	d01a      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	61bb      	str	r3, [r7, #24]
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	4a35      	ldr	r2, [pc, #212]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002624:	2300      	movs	r3, #0
 8002626:	69b8      	ldr	r0, [r7, #24]
 8002628:	69f9      	ldr	r1, [r7, #28]
 800262a:	f7fd fe19 	bl	8000260 <__aeabi_lmul>
 800262e:	0002      	movs	r2, r0
 8002630:	000b      	movs	r3, r1
 8002632:	0010      	movs	r0, r2
 8002634:	0019      	movs	r1, r3
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f7fd fded 	bl	8000220 <__aeabi_uldivmod>
 8002646:	0002      	movs	r2, r0
 8002648:	000b      	movs	r3, r1
 800264a:	0013      	movs	r3, r2
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
 800264e:	e037      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002650:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_RCC_GetSysClockFreq+0x138>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2210      	movs	r2, #16
 8002656:	4013      	ands	r3, r2
 8002658:	d01a      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4a23      	ldr	r2, [pc, #140]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002664:	2300      	movs	r3, #0
 8002666:	68b8      	ldr	r0, [r7, #8]
 8002668:	68f9      	ldr	r1, [r7, #12]
 800266a:	f7fd fdf9 	bl	8000260 <__aeabi_lmul>
 800266e:	0002      	movs	r2, r0
 8002670:	000b      	movs	r3, r1
 8002672:	0010      	movs	r0, r2
 8002674:	0019      	movs	r1, r3
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f7fd fdcd 	bl	8000220 <__aeabi_uldivmod>
 8002686:	0002      	movs	r2, r0
 8002688:	000b      	movs	r3, r1
 800268a:	0013      	movs	r3, r2
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
 800268e:	e017      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	0018      	movs	r0, r3
 8002694:	2300      	movs	r3, #0
 8002696:	0019      	movs	r1, r3
 8002698:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x140>)
 800269a:	2300      	movs	r3, #0
 800269c:	f7fd fde0 	bl	8000260 <__aeabi_lmul>
 80026a0:	0002      	movs	r2, r0
 80026a2:	000b      	movs	r3, r1
 80026a4:	0010      	movs	r0, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	001c      	movs	r4, r3
 80026ac:	2300      	movs	r3, #0
 80026ae:	001d      	movs	r5, r3
 80026b0:	0022      	movs	r2, r4
 80026b2:	002b      	movs	r3, r5
 80026b4:	f7fd fdb4 	bl	8000220 <__aeabi_uldivmod>
 80026b8:	0002      	movs	r2, r0
 80026ba:	000b      	movs	r3, r1
 80026bc:	0013      	movs	r3, r2
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80026c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026c4:	e00d      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_GetSysClockFreq+0x138>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	0b5b      	lsrs	r3, r3, #13
 80026cc:	2207      	movs	r2, #7
 80026ce:	4013      	ands	r3, r2
 80026d0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	3301      	adds	r3, #1
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	0212      	lsls	r2, r2, #8
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b00e      	add	sp, #56	; 0x38
 80026ea:	bdb0      	pop	{r4, r5, r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	003d0900 	.word	0x003d0900
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200
 80026fc:	08003934 	.word	0x08003934

08002700 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_RCC_GetHCLKFreq+0x10>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002718:	f7ff fff2 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 800271c:	0001      	movs	r1, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	2207      	movs	r2, #7
 8002726:	4013      	ands	r3, r2
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_RCC_GetPCLK1Freq+0x28>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	40d9      	lsrs	r1, r3
 800272e:	000b      	movs	r3, r1
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40021000 	.word	0x40021000
 800273c:	0800392c 	.word	0x0800392c

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffdc 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002748:	0001      	movs	r1, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	2207      	movs	r2, #7
 8002752:	4013      	ands	r3, r2
 8002754:	4a04      	ldr	r2, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	40d9      	lsrs	r1, r3
 800275a:	000b      	movs	r3, r1
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	40021000 	.word	0x40021000
 8002768:	0800392c 	.word	0x0800392c

0800276c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002774:	2017      	movs	r0, #23
 8002776:	183b      	adds	r3, r7, r0
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2220      	movs	r2, #32
 8002782:	4013      	ands	r3, r2
 8002784:	d100      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002786:	e0c2      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002788:	4b89      	ldr	r3, [pc, #548]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800278a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	055b      	lsls	r3, r3, #21
 8002790:	4013      	ands	r3, r2
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b86      	ldr	r3, [pc, #536]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002798:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	0549      	lsls	r1, r1, #21
 800279e:	430a      	orrs	r2, r1
 80027a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80027a2:	183b      	adds	r3, r7, r0
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4013      	ands	r3, r2
 80027b2:	d11a      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b4:	4b7f      	ldr	r3, [pc, #508]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b7e      	ldr	r3, [pc, #504]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027ba:	2180      	movs	r1, #128	; 0x80
 80027bc:	0049      	lsls	r1, r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7fe fcc9 	bl	8001158 <HAL_GetTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	e008      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027cc:	f7fe fcc4 	bl	8001158 <HAL_GetTick>
 80027d0:	0002      	movs	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0e3      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80027ea:	4b71      	ldr	r3, [pc, #452]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	23c0      	movs	r3, #192	; 0xc0
 80027f0:	039b      	lsls	r3, r3, #14
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	23c0      	movs	r3, #192	; 0xc0
 80027fc:	039b      	lsls	r3, r3, #14
 80027fe:	4013      	ands	r3, r2
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	429a      	cmp	r2, r3
 8002804:	d013      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	23c0      	movs	r3, #192	; 0xc0
 800280c:	029b      	lsls	r3, r3, #10
 800280e:	401a      	ands	r2, r3
 8002810:	23c0      	movs	r3, #192	; 0xc0
 8002812:	029b      	lsls	r3, r3, #10
 8002814:	429a      	cmp	r2, r3
 8002816:	d10a      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002818:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	2380      	movs	r3, #128	; 0x80
 800281e:	029b      	lsls	r3, r3, #10
 8002820:	401a      	ands	r2, r3
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	429a      	cmp	r2, r3
 8002828:	d101      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0bb      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800282e:	4b60      	ldr	r3, [pc, #384]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002832:	23c0      	movs	r3, #192	; 0xc0
 8002834:	029b      	lsls	r3, r3, #10
 8002836:	4013      	ands	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d03b      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	23c0      	movs	r3, #192	; 0xc0
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d033      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2220      	movs	r2, #32
 8002856:	4013      	ands	r3, r2
 8002858:	d02e      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800285a:	4b55      	ldr	r3, [pc, #340]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285e:	4a56      	ldr	r2, [pc, #344]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002860:	4013      	ands	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002864:	4b52      	ldr	r3, [pc, #328]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002866:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002868:	4b51      	ldr	r3, [pc, #324]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	0309      	lsls	r1, r1, #12
 800286e:	430a      	orrs	r2, r1
 8002870:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002872:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002876:	4b4e      	ldr	r3, [pc, #312]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002878:	4950      	ldr	r1, [pc, #320]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800287a:	400a      	ands	r2, r1
 800287c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800287e:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d014      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe fc63 	bl	8001158 <HAL_GetTick>
 8002892:	0003      	movs	r3, r0
 8002894:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002896:	e009      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002898:	f7fe fc5e 	bl	8001158 <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	4a47      	ldr	r2, [pc, #284]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e07c      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028ac:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0ef      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	23c0      	movs	r3, #192	; 0xc0
 80028be:	029b      	lsls	r3, r3, #10
 80028c0:	401a      	ands	r2, r3
 80028c2:	23c0      	movs	r3, #192	; 0xc0
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3d      	ldr	r2, [pc, #244]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	23c0      	movs	r3, #192	; 0xc0
 80028da:	039b      	lsls	r3, r3, #14
 80028dc:	401a      	ands	r2, r3
 80028de:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	4b32      	ldr	r3, [pc, #200]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028e6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	23c0      	movs	r3, #192	; 0xc0
 80028ee:	029b      	lsls	r3, r3, #10
 80028f0:	401a      	ands	r2, r3
 80028f2:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028f4:	430a      	orrs	r2, r1
 80028f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f8:	2317      	movs	r3, #23
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002906:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002908:	492f      	ldr	r1, [pc, #188]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800290a:	400a      	ands	r2, r1
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2201      	movs	r2, #1
 8002914:	4013      	ands	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800291a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291c:	2203      	movs	r2, #3
 800291e:	4393      	bics	r3, r2
 8002920:	0019      	movs	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002928:	430a      	orrs	r2, r1
 800292a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2202      	movs	r2, #2
 8002932:	4013      	ands	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	220c      	movs	r2, #12
 800293c:	4393      	bics	r3, r2
 800293e:	0019      	movs	r1, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002946:	430a      	orrs	r2, r1
 8002948:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d009      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002964:	430a      	orrs	r2, r1
 8002966:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2208      	movs	r2, #8
 800296e:	4013      	ands	r3, r2
 8002970:	d009      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002982:	430a      	orrs	r2, r1
 8002984:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2280      	movs	r2, #128	; 0x80
 800298c:	4013      	ands	r3, r2
 800298e:	d009      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002996:	4013      	ands	r3, r2
 8002998:	0019      	movs	r1, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40007000 	.word	0x40007000
 80029b8:	fffcffff 	.word	0xfffcffff
 80029bc:	fff7ffff 	.word	0xfff7ffff
 80029c0:	00001388 	.word	0x00001388
 80029c4:	ffcfffff 	.word	0xffcfffff
 80029c8:	efffffff 	.word	0xefffffff
 80029cc:	fffff3ff 	.word	0xfffff3ff
 80029d0:	ffffcfff 	.word	0xffffcfff
 80029d4:	fff3ffff 	.word	0xfff3ffff

080029d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e032      	b.n	8002a50 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2239      	movs	r2, #57	; 0x39
 80029ee:	5c9b      	ldrb	r3, [r3, r2]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2238      	movs	r2, #56	; 0x38
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7fe f9bb 	bl	8000d7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2239      	movs	r2, #57	; 0x39
 8002a0a:	2102      	movs	r1, #2
 8002a0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	0019      	movs	r1, r3
 8002a18:	0010      	movs	r0, r2
 8002a1a:	f000 f8e3 	bl	8002be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	223e      	movs	r2, #62	; 0x3e
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	223a      	movs	r2, #58	; 0x3a
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223b      	movs	r2, #59	; 0x3b
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	223c      	movs	r2, #60	; 0x3c
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223d      	movs	r2, #61	; 0x3d
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2239      	movs	r2, #57	; 0x39
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2317      	movs	r3, #23
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2238      	movs	r2, #56	; 0x38
 8002a70:	5c9b      	ldrb	r3, [r3, r2]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0ad      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2238      	movs	r2, #56	; 0x38
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d100      	bne.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a88:	e076      	b.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d900      	bls.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002a90:	e095      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d04e      	beq.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d900      	bls.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002a9e:	e08e      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x56>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d021      	beq.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002aac:	e087      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f8e8 	bl	8002c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	438a      	bics	r2, r1
 8002ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6999      	ldr	r1, [r3, #24]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
      break;
 8002aee:	e06b      	b.n	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 f903 	bl	8002d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	0109      	lsls	r1, r1, #4
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4931      	ldr	r1, [pc, #196]	; (8002be0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6999      	ldr	r1, [r3, #24]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	619a      	str	r2, [r3, #24]
      break;
 8002b34:	e048      	b.n	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f922 	bl	8002d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2108      	movs	r1, #8
 8002b50:	430a      	orrs	r2, r1
 8002b52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2104      	movs	r1, #4
 8002b60:	438a      	bics	r2, r1
 8002b62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69d9      	ldr	r1, [r3, #28]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	61da      	str	r2, [r3, #28]
      break;
 8002b76:	e027      	b.n	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	0011      	movs	r1, r2
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 f941 	bl	8002e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0109      	lsls	r1, r1, #4
 8002b94:	430a      	orrs	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	490f      	ldr	r1, [pc, #60]	; (8002be0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69d9      	ldr	r1, [r3, #28]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
      break;
 8002bbc:	e004      	b.n	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002bbe:	2317      	movs	r3, #23
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
      break;
 8002bc6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2238      	movs	r2, #56	; 0x38
 8002bcc:	2100      	movs	r1, #0
 8002bce:	5499      	strb	r1, [r3, r2]

  return status;
 8002bd0:	2317      	movs	r3, #23
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	781b      	ldrb	r3, [r3, #0]
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	fffffbff 	.word	0xfffffbff

08002be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	05db      	lsls	r3, r3, #23
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d007      	beq.n	8002c0e <TIM_Base_SetConfig+0x2a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1f      	ldr	r2, [pc, #124]	; (8002c80 <TIM_Base_SetConfig+0x9c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d003      	beq.n	8002c0e <TIM_Base_SetConfig+0x2a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1e      	ldr	r2, [pc, #120]	; (8002c84 <TIM_Base_SetConfig+0xa0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2270      	movs	r2, #112	; 0x70
 8002c12:	4393      	bics	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	2380      	movs	r3, #128	; 0x80
 8002c24:	05db      	lsls	r3, r3, #23
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d007      	beq.n	8002c3a <TIM_Base_SetConfig+0x56>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <TIM_Base_SetConfig+0x9c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d003      	beq.n	8002c3a <TIM_Base_SetConfig+0x56>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <TIM_Base_SetConfig+0xa0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d108      	bne.n	8002c4c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <TIM_Base_SetConfig+0xa4>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2280      	movs	r2, #128	; 0x80
 8002c50:	4393      	bics	r3, r2
 8002c52:	001a      	movs	r2, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	615a      	str	r2, [r3, #20]
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b004      	add	sp, #16
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40010800 	.word	0x40010800
 8002c84:	40011400 	.word	0x40011400
 8002c88:	fffffcff 	.word	0xfffffcff

08002c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	4393      	bics	r3, r2
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2270      	movs	r2, #112	; 0x70
 8002cba:	4393      	bics	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	621a      	str	r2, [r3, #32]
}
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	b006      	add	sp, #24
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	2210      	movs	r2, #16
 8002d14:	4393      	bics	r3, r2
 8002d16:	001a      	movs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <TIM_OC2_SetConfig+0x7c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <TIM_OC2_SetConfig+0x80>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	4393      	bics	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	621a      	str	r2, [r3, #32]
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b006      	add	sp, #24
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	ffff8fff 	.word	0xffff8fff
 8002d84:	fffffcff 	.word	0xfffffcff

08002d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <TIM_OC3_SetConfig+0x78>)
 8002d98:	401a      	ands	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2270      	movs	r2, #112	; 0x70
 8002db4:	4393      	bics	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	4393      	bics	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <TIM_OC3_SetConfig+0x7c>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	621a      	str	r2, [r3, #32]
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b006      	add	sp, #24
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	fffffeff 	.word	0xfffffeff
 8002e04:	fffffdff 	.word	0xfffffdff

08002e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <TIM_OC4_SetConfig+0x7c>)
 8002e18:	401a      	ands	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <TIM_OC4_SetConfig+0x80>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <TIM_OC4_SetConfig+0x84>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <TIM_OC4_SetConfig+0x88>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	031b      	lsls	r3, r3, #12
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b006      	add	sp, #24
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	ffffefff 	.word	0xffffefff
 8002e88:	ffff8fff 	.word	0xffff8fff
 8002e8c:	fffffcff 	.word	0xfffffcff
 8002e90:	ffffdfff 	.word	0xffffdfff

08002e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2238      	movs	r2, #56	; 0x38
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e042      	b.n	8002f32 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2238      	movs	r2, #56	; 0x38
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2239      	movs	r2, #57	; 0x39
 8002eb8:	2102      	movs	r1, #2
 8002eba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2270      	movs	r2, #112	; 0x70
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	05db      	lsls	r3, r3, #23
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d009      	beq.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0f      	ldr	r2, [pc, #60]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10c      	bne.n	8002f20 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	4393      	bics	r3, r2
 8002f0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2239      	movs	r2, #57	; 0x39
 8002f24:	2101      	movs	r1, #1
 8002f26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2238      	movs	r2, #56	; 0x38
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b004      	add	sp, #16
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	40010800 	.word	0x40010800
 8002f40:	40011400 	.word	0x40011400

08002f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e044      	b.n	8002fe0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2274      	movs	r2, #116	; 0x74
 8002f62:	2100      	movs	r1, #0
 8002f64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7fe f805 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2224      	movs	r2, #36	; 0x24
 8002f72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	438a      	bics	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f830 	bl	8002fec <UART_SetConfig>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e024      	b.n	8002fe0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fac3 	bl	800352c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	490d      	ldr	r1, [pc, #52]	; (8002fe8 <HAL_UART_Init+0xa4>)
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	212a      	movs	r1, #42	; 0x2a
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 fb5b 	bl	8003694 <UART_CheckIdleState>
 8002fde:	0003      	movs	r3, r0
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	ffffb7ff 	.word	0xffffb7ff

08002fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fec:	b5b0      	push	{r4, r5, r7, lr}
 8002fee:	b08e      	sub	sp, #56	; 0x38
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ff4:	231a      	movs	r3, #26
 8002ff6:	2218      	movs	r2, #24
 8002ff8:	4694      	mov	ip, r2
 8002ffa:	44bc      	add	ip, r7
 8002ffc:	4463      	add	r3, ip
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	431a      	orrs	r2, r3
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	431a      	orrs	r2, r3
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4313      	orrs	r3, r2
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4ac1      	ldr	r2, [pc, #772]	; (8003328 <UART_SetConfig+0x33c>)
 8003022:	4013      	ands	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4abd      	ldr	r2, [pc, #756]	; (800332c <UART_SetConfig+0x340>)
 8003038:	4013      	ands	r3, r2
 800303a:	0019      	movs	r1, r3
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4ab7      	ldr	r2, [pc, #732]	; (8003330 <UART_SetConfig+0x344>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d004      	beq.n	8003062 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800305e:	4313      	orrs	r3, r2
 8003060:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4ab2      	ldr	r2, [pc, #712]	; (8003334 <UART_SetConfig+0x348>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003074:	430a      	orrs	r2, r1
 8003076:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4aae      	ldr	r2, [pc, #696]	; (8003338 <UART_SetConfig+0x34c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d136      	bne.n	80030f0 <UART_SetConfig+0x104>
 8003082:	4bae      	ldr	r3, [pc, #696]	; (800333c <UART_SetConfig+0x350>)
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	2203      	movs	r2, #3
 8003088:	4013      	ands	r3, r2
 800308a:	2b03      	cmp	r3, #3
 800308c:	d020      	beq.n	80030d0 <UART_SetConfig+0xe4>
 800308e:	d827      	bhi.n	80030e0 <UART_SetConfig+0xf4>
 8003090:	2b02      	cmp	r3, #2
 8003092:	d00d      	beq.n	80030b0 <UART_SetConfig+0xc4>
 8003094:	d824      	bhi.n	80030e0 <UART_SetConfig+0xf4>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <UART_SetConfig+0xb4>
 800309a:	2b01      	cmp	r3, #1
 800309c:	d010      	beq.n	80030c0 <UART_SetConfig+0xd4>
 800309e:	e01f      	b.n	80030e0 <UART_SetConfig+0xf4>
 80030a0:	231b      	movs	r3, #27
 80030a2:	2218      	movs	r2, #24
 80030a4:	4694      	mov	ip, r2
 80030a6:	44bc      	add	ip, r7
 80030a8:	4463      	add	r3, ip
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e0ab      	b.n	8003208 <UART_SetConfig+0x21c>
 80030b0:	231b      	movs	r3, #27
 80030b2:	2218      	movs	r2, #24
 80030b4:	4694      	mov	ip, r2
 80030b6:	44bc      	add	ip, r7
 80030b8:	4463      	add	r3, ip
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e0a3      	b.n	8003208 <UART_SetConfig+0x21c>
 80030c0:	231b      	movs	r3, #27
 80030c2:	2218      	movs	r2, #24
 80030c4:	4694      	mov	ip, r2
 80030c6:	44bc      	add	ip, r7
 80030c8:	4463      	add	r3, ip
 80030ca:	2204      	movs	r2, #4
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e09b      	b.n	8003208 <UART_SetConfig+0x21c>
 80030d0:	231b      	movs	r3, #27
 80030d2:	2218      	movs	r2, #24
 80030d4:	4694      	mov	ip, r2
 80030d6:	44bc      	add	ip, r7
 80030d8:	4463      	add	r3, ip
 80030da:	2208      	movs	r2, #8
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e093      	b.n	8003208 <UART_SetConfig+0x21c>
 80030e0:	231b      	movs	r3, #27
 80030e2:	2218      	movs	r2, #24
 80030e4:	4694      	mov	ip, r2
 80030e6:	44bc      	add	ip, r7
 80030e8:	4463      	add	r3, ip
 80030ea:	2210      	movs	r2, #16
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e08b      	b.n	8003208 <UART_SetConfig+0x21c>
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a92      	ldr	r2, [pc, #584]	; (8003340 <UART_SetConfig+0x354>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d136      	bne.n	8003168 <UART_SetConfig+0x17c>
 80030fa:	4b90      	ldr	r3, [pc, #576]	; (800333c <UART_SetConfig+0x350>)
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	220c      	movs	r2, #12
 8003100:	4013      	ands	r3, r2
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d020      	beq.n	8003148 <UART_SetConfig+0x15c>
 8003106:	d827      	bhi.n	8003158 <UART_SetConfig+0x16c>
 8003108:	2b08      	cmp	r3, #8
 800310a:	d00d      	beq.n	8003128 <UART_SetConfig+0x13c>
 800310c:	d824      	bhi.n	8003158 <UART_SetConfig+0x16c>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <UART_SetConfig+0x12c>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d010      	beq.n	8003138 <UART_SetConfig+0x14c>
 8003116:	e01f      	b.n	8003158 <UART_SetConfig+0x16c>
 8003118:	231b      	movs	r3, #27
 800311a:	2218      	movs	r2, #24
 800311c:	4694      	mov	ip, r2
 800311e:	44bc      	add	ip, r7
 8003120:	4463      	add	r3, ip
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
 8003126:	e06f      	b.n	8003208 <UART_SetConfig+0x21c>
 8003128:	231b      	movs	r3, #27
 800312a:	2218      	movs	r2, #24
 800312c:	4694      	mov	ip, r2
 800312e:	44bc      	add	ip, r7
 8003130:	4463      	add	r3, ip
 8003132:	2202      	movs	r2, #2
 8003134:	701a      	strb	r2, [r3, #0]
 8003136:	e067      	b.n	8003208 <UART_SetConfig+0x21c>
 8003138:	231b      	movs	r3, #27
 800313a:	2218      	movs	r2, #24
 800313c:	4694      	mov	ip, r2
 800313e:	44bc      	add	ip, r7
 8003140:	4463      	add	r3, ip
 8003142:	2204      	movs	r2, #4
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e05f      	b.n	8003208 <UART_SetConfig+0x21c>
 8003148:	231b      	movs	r3, #27
 800314a:	2218      	movs	r2, #24
 800314c:	4694      	mov	ip, r2
 800314e:	44bc      	add	ip, r7
 8003150:	4463      	add	r3, ip
 8003152:	2208      	movs	r2, #8
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e057      	b.n	8003208 <UART_SetConfig+0x21c>
 8003158:	231b      	movs	r3, #27
 800315a:	2218      	movs	r2, #24
 800315c:	4694      	mov	ip, r2
 800315e:	44bc      	add	ip, r7
 8003160:	4463      	add	r3, ip
 8003162:	2210      	movs	r2, #16
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e04f      	b.n	8003208 <UART_SetConfig+0x21c>
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a70      	ldr	r2, [pc, #448]	; (8003330 <UART_SetConfig+0x344>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d143      	bne.n	80031fa <UART_SetConfig+0x20e>
 8003172:	4b72      	ldr	r3, [pc, #456]	; (800333c <UART_SetConfig+0x350>)
 8003174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003176:	23c0      	movs	r3, #192	; 0xc0
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	4013      	ands	r3, r2
 800317c:	22c0      	movs	r2, #192	; 0xc0
 800317e:	0112      	lsls	r2, r2, #4
 8003180:	4293      	cmp	r3, r2
 8003182:	d02a      	beq.n	80031da <UART_SetConfig+0x1ee>
 8003184:	22c0      	movs	r2, #192	; 0xc0
 8003186:	0112      	lsls	r2, r2, #4
 8003188:	4293      	cmp	r3, r2
 800318a:	d82e      	bhi.n	80031ea <UART_SetConfig+0x1fe>
 800318c:	2280      	movs	r2, #128	; 0x80
 800318e:	0112      	lsls	r2, r2, #4
 8003190:	4293      	cmp	r3, r2
 8003192:	d012      	beq.n	80031ba <UART_SetConfig+0x1ce>
 8003194:	2280      	movs	r2, #128	; 0x80
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	4293      	cmp	r3, r2
 800319a:	d826      	bhi.n	80031ea <UART_SetConfig+0x1fe>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d004      	beq.n	80031aa <UART_SetConfig+0x1be>
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	00d2      	lsls	r2, r2, #3
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d010      	beq.n	80031ca <UART_SetConfig+0x1de>
 80031a8:	e01f      	b.n	80031ea <UART_SetConfig+0x1fe>
 80031aa:	231b      	movs	r3, #27
 80031ac:	2218      	movs	r2, #24
 80031ae:	4694      	mov	ip, r2
 80031b0:	44bc      	add	ip, r7
 80031b2:	4463      	add	r3, ip
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e026      	b.n	8003208 <UART_SetConfig+0x21c>
 80031ba:	231b      	movs	r3, #27
 80031bc:	2218      	movs	r2, #24
 80031be:	4694      	mov	ip, r2
 80031c0:	44bc      	add	ip, r7
 80031c2:	4463      	add	r3, ip
 80031c4:	2202      	movs	r2, #2
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e01e      	b.n	8003208 <UART_SetConfig+0x21c>
 80031ca:	231b      	movs	r3, #27
 80031cc:	2218      	movs	r2, #24
 80031ce:	4694      	mov	ip, r2
 80031d0:	44bc      	add	ip, r7
 80031d2:	4463      	add	r3, ip
 80031d4:	2204      	movs	r2, #4
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e016      	b.n	8003208 <UART_SetConfig+0x21c>
 80031da:	231b      	movs	r3, #27
 80031dc:	2218      	movs	r2, #24
 80031de:	4694      	mov	ip, r2
 80031e0:	44bc      	add	ip, r7
 80031e2:	4463      	add	r3, ip
 80031e4:	2208      	movs	r2, #8
 80031e6:	701a      	strb	r2, [r3, #0]
 80031e8:	e00e      	b.n	8003208 <UART_SetConfig+0x21c>
 80031ea:	231b      	movs	r3, #27
 80031ec:	2218      	movs	r2, #24
 80031ee:	4694      	mov	ip, r2
 80031f0:	44bc      	add	ip, r7
 80031f2:	4463      	add	r3, ip
 80031f4:	2210      	movs	r2, #16
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	e006      	b.n	8003208 <UART_SetConfig+0x21c>
 80031fa:	231b      	movs	r3, #27
 80031fc:	2218      	movs	r2, #24
 80031fe:	4694      	mov	ip, r2
 8003200:	44bc      	add	ip, r7
 8003202:	4463      	add	r3, ip
 8003204:	2210      	movs	r2, #16
 8003206:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a48      	ldr	r2, [pc, #288]	; (8003330 <UART_SetConfig+0x344>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d000      	beq.n	8003214 <UART_SetConfig+0x228>
 8003212:	e09b      	b.n	800334c <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003214:	231b      	movs	r3, #27
 8003216:	2218      	movs	r2, #24
 8003218:	4694      	mov	ip, r2
 800321a:	44bc      	add	ip, r7
 800321c:	4463      	add	r3, ip
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d01d      	beq.n	8003260 <UART_SetConfig+0x274>
 8003224:	dc20      	bgt.n	8003268 <UART_SetConfig+0x27c>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d015      	beq.n	8003256 <UART_SetConfig+0x26a>
 800322a:	dc1d      	bgt.n	8003268 <UART_SetConfig+0x27c>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <UART_SetConfig+0x24a>
 8003230:	2b02      	cmp	r3, #2
 8003232:	d005      	beq.n	8003240 <UART_SetConfig+0x254>
 8003234:	e018      	b.n	8003268 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003236:	f7ff fa6d 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 800323a:	0003      	movs	r3, r0
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800323e:	e01d      	b.n	800327c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003240:	4b3e      	ldr	r3, [pc, #248]	; (800333c <UART_SetConfig+0x350>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2210      	movs	r2, #16
 8003246:	4013      	ands	r3, r2
 8003248:	d002      	beq.n	8003250 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800324a:	4b3e      	ldr	r3, [pc, #248]	; (8003344 <UART_SetConfig+0x358>)
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800324e:	e015      	b.n	800327c <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8003250:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <UART_SetConfig+0x35c>)
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003254:	e012      	b.n	800327c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7ff f9ad 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800325a:	0003      	movs	r3, r0
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800325e:	e00d      	b.n	800327c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003266:	e009      	b.n	800327c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800326c:	231a      	movs	r3, #26
 800326e:	2218      	movs	r2, #24
 8003270:	4694      	mov	ip, r2
 8003272:	44bc      	add	ip, r7
 8003274:	4463      	add	r3, ip
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
        break;
 800327a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d100      	bne.n	8003284 <UART_SetConfig+0x298>
 8003282:	e139      	b.n	80034f8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	0013      	movs	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	189b      	adds	r3, r3, r2
 800328e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003290:	429a      	cmp	r2, r3
 8003292:	d305      	bcc.n	80032a0 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800329a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800329c:	429a      	cmp	r2, r3
 800329e:	d907      	bls.n	80032b0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80032a0:	231a      	movs	r3, #26
 80032a2:	2218      	movs	r2, #24
 80032a4:	4694      	mov	ip, r2
 80032a6:	44bc      	add	ip, r7
 80032a8:	4463      	add	r3, ip
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	e123      	b.n	80034f8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	6939      	ldr	r1, [r7, #16]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	000b      	movs	r3, r1
 80032be:	0e1b      	lsrs	r3, r3, #24
 80032c0:	0010      	movs	r0, r2
 80032c2:	0205      	lsls	r5, r0, #8
 80032c4:	431d      	orrs	r5, r3
 80032c6:	000b      	movs	r3, r1
 80032c8:	021c      	lsls	r4, r3, #8
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68b8      	ldr	r0, [r7, #8]
 80032d8:	68f9      	ldr	r1, [r7, #12]
 80032da:	1900      	adds	r0, r0, r4
 80032dc:	4169      	adcs	r1, r5
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f7fc ff98 	bl	8000220 <__aeabi_uldivmod>
 80032f0:	0002      	movs	r2, r0
 80032f2:	000b      	movs	r3, r1
 80032f4:	0013      	movs	r3, r2
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032fa:	23c0      	movs	r3, #192	; 0xc0
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	429a      	cmp	r2, r3
 8003300:	d309      	bcc.n	8003316 <UART_SetConfig+0x32a>
 8003302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	035b      	lsls	r3, r3, #13
 8003308:	429a      	cmp	r2, r3
 800330a:	d204      	bcs.n	8003316 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	e0f0      	b.n	80034f8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003316:	231a      	movs	r3, #26
 8003318:	2218      	movs	r2, #24
 800331a:	4694      	mov	ip, r2
 800331c:	44bc      	add	ip, r7
 800331e:	4463      	add	r3, ip
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e0e8      	b.n	80034f8 <UART_SetConfig+0x50c>
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	efff69f3 	.word	0xefff69f3
 800332c:	ffffcfff 	.word	0xffffcfff
 8003330:	40004800 	.word	0x40004800
 8003334:	fffff4ff 	.word	0xfffff4ff
 8003338:	40013800 	.word	0x40013800
 800333c:	40021000 	.word	0x40021000
 8003340:	40004400 	.word	0x40004400
 8003344:	003d0900 	.word	0x003d0900
 8003348:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	429a      	cmp	r2, r3
 8003356:	d000      	beq.n	800335a <UART_SetConfig+0x36e>
 8003358:	e074      	b.n	8003444 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800335a:	231b      	movs	r3, #27
 800335c:	2218      	movs	r2, #24
 800335e:	4694      	mov	ip, r2
 8003360:	44bc      	add	ip, r7
 8003362:	4463      	add	r3, ip
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b08      	cmp	r3, #8
 8003368:	d822      	bhi.n	80033b0 <UART_SetConfig+0x3c4>
 800336a:	009a      	lsls	r2, r3, #2
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <UART_SetConfig+0x52c>)
 800336e:	18d3      	adds	r3, r2, r3
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003374:	f7ff f9ce 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003378:	0003      	movs	r3, r0
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800337c:	e022      	b.n	80033c4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800337e:	f7ff f9df 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8003382:	0003      	movs	r3, r0
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003386:	e01d      	b.n	80033c4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <UART_SetConfig+0x530>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2210      	movs	r2, #16
 800338e:	4013      	ands	r3, r2
 8003390:	d002      	beq.n	8003398 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003392:	4b63      	ldr	r3, [pc, #396]	; (8003520 <UART_SetConfig+0x534>)
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003396:	e015      	b.n	80033c4 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8003398:	4b62      	ldr	r3, [pc, #392]	; (8003524 <UART_SetConfig+0x538>)
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800339c:	e012      	b.n	80033c4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339e:	f7ff f909 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80033a2:	0003      	movs	r3, r0
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033a6:	e00d      	b.n	80033c4 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033ae:	e009      	b.n	80033c4 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80033b4:	231a      	movs	r3, #26
 80033b6:	2218      	movs	r2, #24
 80033b8:	4694      	mov	ip, r2
 80033ba:	44bc      	add	ip, r7
 80033bc:	4463      	add	r3, ip
 80033be:	2201      	movs	r2, #1
 80033c0:	701a      	strb	r2, [r3, #0]
        break;
 80033c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d100      	bne.n	80033cc <UART_SetConfig+0x3e0>
 80033ca:	e095      	b.n	80034f8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ce:	005a      	lsls	r2, r3, #1
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	18d2      	adds	r2, r2, r3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0019      	movs	r1, r3
 80033de:	0010      	movs	r0, r2
 80033e0:	f7fc fe92 	bl	8000108 <__udivsi3>
 80033e4:	0003      	movs	r3, r0
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	2b0f      	cmp	r3, #15
 80033ee:	d921      	bls.n	8003434 <UART_SetConfig+0x448>
 80033f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f2:	2380      	movs	r3, #128	; 0x80
 80033f4:	025b      	lsls	r3, r3, #9
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d21c      	bcs.n	8003434 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	200e      	movs	r0, #14
 8003400:	2418      	movs	r4, #24
 8003402:	193b      	adds	r3, r7, r4
 8003404:	181b      	adds	r3, r3, r0
 8003406:	210f      	movs	r1, #15
 8003408:	438a      	bics	r2, r1
 800340a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	b29b      	uxth	r3, r3
 8003412:	2207      	movs	r2, #7
 8003414:	4013      	ands	r3, r2
 8003416:	b299      	uxth	r1, r3
 8003418:	193b      	adds	r3, r7, r4
 800341a:	181b      	adds	r3, r3, r0
 800341c:	193a      	adds	r2, r7, r4
 800341e:	1812      	adds	r2, r2, r0
 8003420:	8812      	ldrh	r2, [r2, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	193a      	adds	r2, r7, r4
 800342c:	1812      	adds	r2, r2, r0
 800342e:	8812      	ldrh	r2, [r2, #0]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	e061      	b.n	80034f8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003434:	231a      	movs	r3, #26
 8003436:	2218      	movs	r2, #24
 8003438:	4694      	mov	ip, r2
 800343a:	44bc      	add	ip, r7
 800343c:	4463      	add	r3, ip
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e059      	b.n	80034f8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003444:	231b      	movs	r3, #27
 8003446:	2218      	movs	r2, #24
 8003448:	4694      	mov	ip, r2
 800344a:	44bc      	add	ip, r7
 800344c:	4463      	add	r3, ip
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d822      	bhi.n	800349a <UART_SetConfig+0x4ae>
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	4b34      	ldr	r3, [pc, #208]	; (8003528 <UART_SetConfig+0x53c>)
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345e:	f7ff f959 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8003462:	0003      	movs	r3, r0
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003466:	e022      	b.n	80034ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7ff f96a 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 800346c:	0003      	movs	r3, r0
 800346e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003470:	e01d      	b.n	80034ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003472:	4b2a      	ldr	r3, [pc, #168]	; (800351c <UART_SetConfig+0x530>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2210      	movs	r2, #16
 8003478:	4013      	ands	r3, r2
 800347a:	d002      	beq.n	8003482 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800347c:	4b28      	ldr	r3, [pc, #160]	; (8003520 <UART_SetConfig+0x534>)
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003480:	e015      	b.n	80034ae <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003482:	4b28      	ldr	r3, [pc, #160]	; (8003524 <UART_SetConfig+0x538>)
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003486:	e012      	b.n	80034ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003488:	f7ff f894 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800348c:	0003      	movs	r3, r0
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003490:	e00d      	b.n	80034ae <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003498:	e009      	b.n	80034ae <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800349e:	231a      	movs	r3, #26
 80034a0:	2218      	movs	r2, #24
 80034a2:	4694      	mov	ip, r2
 80034a4:	44bc      	add	ip, r7
 80034a6:	4463      	add	r3, ip
 80034a8:	2201      	movs	r2, #1
 80034aa:	701a      	strb	r2, [r3, #0]
        break;
 80034ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80034ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d021      	beq.n	80034f8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	085a      	lsrs	r2, r3, #1
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	18d2      	adds	r2, r2, r3
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	0019      	movs	r1, r3
 80034c4:	0010      	movs	r0, r2
 80034c6:	f7fc fe1f 	bl	8000108 <__udivsi3>
 80034ca:	0003      	movs	r3, r0
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b0f      	cmp	r3, #15
 80034d4:	d909      	bls.n	80034ea <UART_SetConfig+0x4fe>
 80034d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	025b      	lsls	r3, r3, #9
 80034dc:	429a      	cmp	r2, r3
 80034de:	d204      	bcs.n	80034ea <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e006      	b.n	80034f8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ea:	231a      	movs	r3, #26
 80034ec:	2218      	movs	r2, #24
 80034ee:	4694      	mov	ip, r2
 80034f0:	44bc      	add	ip, r7
 80034f2:	4463      	add	r3, ip
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2200      	movs	r2, #0
 80034fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	2200      	movs	r2, #0
 8003502:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003504:	231a      	movs	r3, #26
 8003506:	2218      	movs	r2, #24
 8003508:	4694      	mov	ip, r2
 800350a:	44bc      	add	ip, r7
 800350c:	4463      	add	r3, ip
 800350e:	781b      	ldrb	r3, [r3, #0]
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b00e      	add	sp, #56	; 0x38
 8003516:	bdb0      	pop	{r4, r5, r7, pc}
 8003518:	08003940 	.word	0x08003940
 800351c:	40021000 	.word	0x40021000
 8003520:	003d0900 	.word	0x003d0900
 8003524:	00f42400 	.word	0x00f42400
 8003528:	08003964 	.word	0x08003964

0800352c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	2201      	movs	r2, #1
 800353a:	4013      	ands	r3, r2
 800353c:	d00b      	beq.n	8003556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <UART_AdvFeatureConfig+0x144>)
 8003546:	4013      	ands	r3, r2
 8003548:	0019      	movs	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2202      	movs	r2, #2
 800355c:	4013      	ands	r3, r2
 800355e:	d00b      	beq.n	8003578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4a43      	ldr	r2, [pc, #268]	; (8003674 <UART_AdvFeatureConfig+0x148>)
 8003568:	4013      	ands	r3, r2
 800356a:	0019      	movs	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	2204      	movs	r2, #4
 800357e:	4013      	ands	r3, r2
 8003580:	d00b      	beq.n	800359a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <UART_AdvFeatureConfig+0x14c>)
 800358a:	4013      	ands	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	2208      	movs	r2, #8
 80035a0:	4013      	ands	r3, r2
 80035a2:	d00b      	beq.n	80035bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a34      	ldr	r2, [pc, #208]	; (800367c <UART_AdvFeatureConfig+0x150>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	2210      	movs	r2, #16
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00b      	beq.n	80035de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	4a2c      	ldr	r2, [pc, #176]	; (8003680 <UART_AdvFeatureConfig+0x154>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	0019      	movs	r1, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	2220      	movs	r2, #32
 80035e4:	4013      	ands	r3, r2
 80035e6:	d00b      	beq.n	8003600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	4a25      	ldr	r2, [pc, #148]	; (8003684 <UART_AdvFeatureConfig+0x158>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	2240      	movs	r2, #64	; 0x40
 8003606:	4013      	ands	r3, r2
 8003608:	d01d      	beq.n	8003646 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <UART_AdvFeatureConfig+0x15c>)
 8003612:	4013      	ands	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	035b      	lsls	r3, r3, #13
 800362a:	429a      	cmp	r2, r3
 800362c:	d10b      	bne.n	8003646 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a15      	ldr	r2, [pc, #84]	; (800368c <UART_AdvFeatureConfig+0x160>)
 8003636:	4013      	ands	r3, r2
 8003638:	0019      	movs	r1, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	4013      	ands	r3, r2
 800364e:	d00b      	beq.n	8003668 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <UART_AdvFeatureConfig+0x164>)
 8003658:	4013      	ands	r3, r2
 800365a:	0019      	movs	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}
 8003670:	fffdffff 	.word	0xfffdffff
 8003674:	fffeffff 	.word	0xfffeffff
 8003678:	fffbffff 	.word	0xfffbffff
 800367c:	ffff7fff 	.word	0xffff7fff
 8003680:	ffffefff 	.word	0xffffefff
 8003684:	ffffdfff 	.word	0xffffdfff
 8003688:	ffefffff 	.word	0xffefffff
 800368c:	ff9fffff 	.word	0xff9fffff
 8003690:	fff7ffff 	.word	0xfff7ffff

08003694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af02      	add	r7, sp, #8
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	2100      	movs	r1, #0
 80036a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036a4:	f7fd fd58 	bl	8001158 <HAL_GetTick>
 80036a8:	0003      	movs	r3, r0
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2208      	movs	r2, #8
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d10c      	bne.n	80036d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2280      	movs	r2, #128	; 0x80
 80036be:	0391      	lsls	r1, r2, #14
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <UART_CheckIdleState+0x8c>)
 80036c4:	9200      	str	r2, [sp, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f000 f82c 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 80036cc:	1e03      	subs	r3, r0, #0
 80036ce:	d001      	beq.n	80036d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e021      	b.n	8003718 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2204      	movs	r2, #4
 80036dc:	4013      	ands	r3, r2
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d10c      	bne.n	80036fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2280      	movs	r2, #128	; 0x80
 80036e6:	03d1      	lsls	r1, r2, #15
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <UART_CheckIdleState+0x8c>)
 80036ec:	9200      	str	r2, [sp, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f000 f818 	bl	8003724 <UART_WaitOnFlagUntilTimeout>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d001      	beq.n	80036fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e00d      	b.n	8003718 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2274      	movs	r2, #116	; 0x74
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b004      	add	sp, #16
 800371e:	bd80      	pop	{r7, pc}
 8003720:	01ffffff 	.word	0x01ffffff

08003724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b094      	sub	sp, #80	; 0x50
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003734:	e0a3      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003738:	3301      	adds	r3, #1
 800373a:	d100      	bne.n	800373e <UART_WaitOnFlagUntilTimeout+0x1a>
 800373c:	e09f      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fd fd0b 	bl	8001158 <HAL_GetTick>
 8003742:	0002      	movs	r2, r0
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <UART_WaitOnFlagUntilTimeout+0x30>
 800374e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003750:	2b00      	cmp	r3, #0
 8003752:	d13d      	bne.n	80037d0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003754:	f3ef 8310 	mrs	r3, PRIMASK
 8003758:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800375c:	647b      	str	r3, [r7, #68]	; 0x44
 800375e:	2301      	movs	r3, #1
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	f383 8810 	msr	PRIMASK, r3
}
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	494c      	ldr	r1, [pc, #304]	; (80038a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003776:	400a      	ands	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	f383 8810 	msr	PRIMASK, r3
}
 8003784:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003786:	f3ef 8310 	mrs	r3, PRIMASK
 800378a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800378e:	643b      	str	r3, [r7, #64]	; 0x40
 8003790:	2301      	movs	r3, #1
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	f383 8810 	msr	PRIMASK, r3
}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2101      	movs	r1, #1
 80037a8:	438a      	bics	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2274      	movs	r2, #116	; 0x74
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e067      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2204      	movs	r2, #4
 80037d8:	4013      	ands	r3, r2
 80037da:	d050      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	401a      	ands	r2, r3
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d146      	bne.n	800387e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	0112      	lsls	r2, r2, #4
 80037f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fa:	f3ef 8310 	mrs	r3, PRIMASK
 80037fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003800:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003804:	2301      	movs	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f383 8810 	msr	PRIMASK, r3
}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4923      	ldr	r1, [pc, #140]	; (80038a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800381c:	400a      	ands	r2, r1
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003822:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f383 8810 	msr	PRIMASK, r3
}
 800382a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382c:	f3ef 8310 	mrs	r3, PRIMASK
 8003830:	61fb      	str	r3, [r7, #28]
  return(result);
 8003832:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003834:	64bb      	str	r3, [r7, #72]	; 0x48
 8003836:	2301      	movs	r3, #1
 8003838:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	f383 8810 	msr	PRIMASK, r3
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2101      	movs	r1, #1
 800384e:	438a      	bics	r2, r1
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	f383 8810 	msr	PRIMASK, r3
}
 800385c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	2120      	movs	r1, #32
 8003870:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2274      	movs	r2, #116	; 0x74
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e010      	b.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	425a      	negs	r2, r3
 800388e:	4153      	adcs	r3, r2
 8003890:	b2db      	uxtb	r3, r3
 8003892:	001a      	movs	r2, r3
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d100      	bne.n	800389e <UART_WaitOnFlagUntilTimeout+0x17a>
 800389c:	e74b      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b014      	add	sp, #80	; 0x50
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	fffffe5f 	.word	0xfffffe5f

080038ac <__libc_init_array>:
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	2600      	movs	r6, #0
 80038b0:	4d0c      	ldr	r5, [pc, #48]	; (80038e4 <__libc_init_array+0x38>)
 80038b2:	4c0d      	ldr	r4, [pc, #52]	; (80038e8 <__libc_init_array+0x3c>)
 80038b4:	1b64      	subs	r4, r4, r5
 80038b6:	10a4      	asrs	r4, r4, #2
 80038b8:	42a6      	cmp	r6, r4
 80038ba:	d109      	bne.n	80038d0 <__libc_init_array+0x24>
 80038bc:	2600      	movs	r6, #0
 80038be:	f000 f821 	bl	8003904 <_init>
 80038c2:	4d0a      	ldr	r5, [pc, #40]	; (80038ec <__libc_init_array+0x40>)
 80038c4:	4c0a      	ldr	r4, [pc, #40]	; (80038f0 <__libc_init_array+0x44>)
 80038c6:	1b64      	subs	r4, r4, r5
 80038c8:	10a4      	asrs	r4, r4, #2
 80038ca:	42a6      	cmp	r6, r4
 80038cc:	d105      	bne.n	80038da <__libc_init_array+0x2e>
 80038ce:	bd70      	pop	{r4, r5, r6, pc}
 80038d0:	00b3      	lsls	r3, r6, #2
 80038d2:	58eb      	ldr	r3, [r5, r3]
 80038d4:	4798      	blx	r3
 80038d6:	3601      	adds	r6, #1
 80038d8:	e7ee      	b.n	80038b8 <__libc_init_array+0xc>
 80038da:	00b3      	lsls	r3, r6, #2
 80038dc:	58eb      	ldr	r3, [r5, r3]
 80038de:	4798      	blx	r3
 80038e0:	3601      	adds	r6, #1
 80038e2:	e7f2      	b.n	80038ca <__libc_init_array+0x1e>
 80038e4:	08003990 	.word	0x08003990
 80038e8:	08003990 	.word	0x08003990
 80038ec:	08003990 	.word	0x08003990
 80038f0:	08003994 	.word	0x08003994

080038f4 <memset>:
 80038f4:	0003      	movs	r3, r0
 80038f6:	1882      	adds	r2, r0, r2
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d100      	bne.n	80038fe <memset+0xa>
 80038fc:	4770      	bx	lr
 80038fe:	7019      	strb	r1, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	e7f9      	b.n	80038f8 <memset+0x4>

08003904 <_init>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr

08003910 <_fini>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr
